"""
‚õß Plan 2 - Basic Memory Management ‚õß
üï∑Ô∏è Gestionnaire de m√©moire de base avec abstraction compl√®te

CONCEPTUALIS√â PAR LUCIE DEFRAITEUR - MA REINE LUCIE
PLANIFI√â PAR ALMA, ARCHITECTE D√âMONIAQUE DU NEXUS LUCIFORME
"""

import time
import json
import pickle
import logging
from typing import Dict, Any, Optional, List, Union
from dataclasses import dataclass, field
from pathlib import Path
import asyncio

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from __init__ import (
    IMemoryManager, ThreadState, ThreadContext, 
    Phase1Config, HookRegistry, Phase1Metrics
)

# ============================================================================
# üï∑Ô∏è GESTIONNAIRE DE M√âMOIRE DE BASE
# ============================================================================

@dataclass
class MemoryEntry:
    """Entr√©e de m√©moire avec m√©tadonn√©es"""
    key: str
    data: Any
    metadata: Dict[str, Any]
    created_at: float
    updated_at: float
    access_count: int = 0
    size_bytes: int = 0
    ttl: Optional[float] = None  # Time To Live en secondes
    
    def is_expired(self) -> bool:
        """V√©rifier si l'entr√©e a expir√©"""
        if self.ttl is None:
            return False
        return time.time() > self.created_at + self.ttl
    
    def update_access(self):
        """Mettre √† jour les statistiques d'acc√®s"""
        self.access_count += 1
        self.updated_at = time.time()

class BasicMemoryManager(IMemoryManager):
    """Gestionnaire de m√©moire de base avec abstraction compl√®te"""
    
    def __init__(self, config: Phase1Config, hook_registry: HookRegistry, 
                 metrics: Phase1Metrics):
        self.config = config
        self.hook_registry = hook_registry
        self.metrics = metrics
        self.logger = logging.getLogger(__name__)
        
        # Stockage en m√©moire
        self._memory: Dict[str, MemoryEntry] = {}
        self._lock = asyncio.Lock()
        
        # Statistiques
        self._total_size = 0
        self._hit_count = 0
        self._miss_count = 0
        
        # Hooks par d√©faut
        self._setup_default_hooks()
    
    def _setup_default_hooks(self):
        """Configurer les hooks par d√©faut"""
        if self.config.enable_hooks:
            self.hook_registry.register_hook("memory_stored", self._on_memory_stored)
            self.hook_registry.register_hook("memory_retrieved", self._on_memory_retrieved)
            self.hook_registry.register_hook("memory_deleted", self._on_memory_deleted)
            self.hook_registry.register_hook("memory_cleaned", self._on_memory_cleaned)
    
    async def store(self, key: str, data: Any, metadata: Optional[Dict[str, Any]] = None) -> bool:
        """Stocker des donn√©es en m√©moire"""
        async with self._lock:
            try:
                # V√©rifier la limite de m√©moire
                if len(self._memory) >= self.config.memory_limit:
                    await self._evict_oldest()
                
                # Calculer la taille
                size_bytes = self._calculate_size(data)
                
                # Cr√©er l'entr√©e
                entry = MemoryEntry(
                    key=key,
                    data=data,
                    metadata=metadata or {},
                    created_at=time.time(),
                    updated_at=time.time(),
                    size_bytes=size_bytes
                )
                
                # Stocker
                self._memory[key] = entry
                self._total_size += size_bytes
                
                # Mettre √† jour les m√©triques
                self.metrics.memory_usage = len(self._memory)
                
                await self.hook_registry.trigger_hook("memory_stored", key, entry)
                self.logger.debug(f"Donn√©es stock√©es: {key} ({size_bytes} bytes)")
                
                return True
                
            except Exception as e:
                self.logger.error(f"Erreur au stockage de {key}: {e}")
                return False
    
    async def retrieve(self, key: str) -> Optional[Any]:
        """R√©cup√©rer des donn√©es de la m√©moire"""
        async with self._lock:
            try:
                if key not in self._memory:
                    self._miss_count += 1
                    return None
                
                entry = self._memory[key]
                
                # V√©rifier l'expiration
                if entry.is_expired():
                    await self.delete(key)
                    self._miss_count += 1
                    return None
                
                # Mettre √† jour les statistiques
                entry.update_access()
                self._hit_count += 1
                
                await self.hook_registry.trigger_hook("memory_retrieved", key, entry)
                self.logger.debug(f"Donn√©es r√©cup√©r√©es: {key}")
                
                return entry.data
                
            except Exception as e:
                self.logger.error(f"Erreur √† la r√©cup√©ration de {key}: {e}")
                return None
    
    async def delete(self, key: str) -> bool:
        """Supprimer des donn√©es de la m√©moire"""
        async with self._lock:
            try:
                if key not in self._memory:
                    return False
                
                entry = self._memory[key]
                self._total_size -= entry.size_bytes
                del self._memory[key]
                
                # Mettre √† jour les m√©triques
                self.metrics.memory_usage = len(self._memory)
                
                await self.hook_registry.trigger_hook("memory_deleted", key, entry)
                self.logger.debug(f"Donn√©es supprim√©es: {key}")
                
                return True
                
            except Exception as e:
                self.logger.error(f"Erreur √† la suppression de {key}: {e}")
                return False
    
    async def list_keys(self, pattern: Optional[str] = None) -> List[str]:
        """Lister les cl√©s en m√©moire"""
        async with self._lock:
            try:
                keys = list(self._memory.keys())
                
                if pattern:
                    import fnmatch
                    keys = [k for k in keys if fnmatch.fnmatch(k, pattern)]
                
                return keys
                
            except Exception as e:
                self.logger.error(f"Erreur au listage des cl√©s: {e}")
                return []
    
    async def cleanup(self, max_age: Optional[float] = None) -> int:
        """Nettoyer la m√©moire"""
        async with self._lock:
            try:
                current_time = time.time()
                cleaned_count = 0
                
                keys_to_delete = []
                
                for key, entry in self._memory.items():
                    should_delete = False
                    
                    # V√©rifier l'expiration TTL
                    if entry.is_expired():
                        should_delete = True
                    
                    # V√©rifier l'√¢ge maximum
                    if max_age and (current_time - entry.created_at) > max_age:
                        should_delete = True
                    
                    if should_delete:
                        keys_to_delete.append(key)
                
                # Supprimer les entr√©es
                for key in keys_to_delete:
                    await self.delete(key)
                    cleaned_count += 1
                
                await self.hook_registry.trigger_hook("memory_cleaned", cleaned_count)
                self.logger.info(f"M√©moire nettoy√©e: {cleaned_count} entr√©es supprim√©es")
                
                return cleaned_count
                
            except Exception as e:
                self.logger.error(f"Erreur au nettoyage: {e}")
                return 0
    
    # ============================================================================
    # üï∑Ô∏è M√âTHODES AVANC√âES
    # ============================================================================
    
    async def get_memory_stats(self) -> Dict[str, Any]:
        """Obtenir les statistiques de m√©moire"""
        async with self._lock:
            return {
                "total_entries": len(self._memory),
                "total_size_bytes": self._total_size,
                "hit_count": self._hit_count,
                "miss_count": self._miss_count,
                "hit_ratio": self._hit_count / (self._hit_count + self._miss_count) if (self._hit_count + self._miss_count) > 0 else 0,
                "memory_limit": self.config.memory_limit,
                "usage_percentage": (len(self._memory) / self.config.memory_limit) * 100
            }
    
    async def set_ttl(self, key: str, ttl_seconds: float) -> bool:
        """D√©finir un TTL pour une cl√©"""
        async with self._lock:
            if key not in self._memory:
                return False
            
            self._memory[key].ttl = ttl_seconds
            self.logger.debug(f"TTL d√©fini pour {key}: {ttl_seconds}s")
            return True
    
    async def get_entry_info(self, key: str) -> Optional[Dict[str, Any]]:
        """Obtenir les informations d'une entr√©e"""
        async with self._lock:
            if key not in self._memory:
                return None
            
            entry = self._memory[key]
            return {
                "key": entry.key,
                "created_at": entry.created_at,
                "updated_at": entry.updated_at,
                "access_count": entry.access_count,
                "size_bytes": entry.size_bytes,
                "ttl": entry.ttl,
                "is_expired": entry.is_expired(),
                "metadata": entry.metadata
            }
    
    # ============================================================================
    # üï∑Ô∏è M√âTHODES PRIV√âES
    # ============================================================================
    
    def _calculate_size(self, data: Any) -> int:
        """Calculer la taille approximative des donn√©es"""
        try:
            if isinstance(data, (str, bytes)):
                return len(data)
            elif isinstance(data, (int, float, bool)):
                return 8
            elif isinstance(data, (list, tuple)):
                return sum(self._calculate_size(item) for item in data)
            elif isinstance(data, dict):
                return sum(self._calculate_size(v) for v in data.values())
            else:
                # Estimation pour les objets complexes
                return len(str(data))
        except:
            return 100  # Taille par d√©faut
    
    async def _evict_oldest(self):
        """√âvincer l'entr√©e la plus ancienne"""
        if not self._memory:
            return
        
        # Trouver l'entr√©e la plus ancienne
        oldest_key = min(self._memory.keys(), 
                        key=lambda k: self._memory[k].created_at)
        
        await self.delete(oldest_key)
        self.logger.debug(f"Entr√©e √©vinc√©e: {oldest_key}")
    
    # ============================================================================
    # üï∑Ô∏è HOOKS PAR D√âFAUT
    # ============================================================================
    
    async def _on_memory_stored(self, key: str, entry: MemoryEntry):
        """Hook appel√© quand des donn√©es sont stock√©es"""
        self.logger.debug(f"Donn√©es stock√©es: {key}")
    
    async def _on_memory_retrieved(self, key: str, entry: MemoryEntry):
        """Hook appel√© quand des donn√©es sont r√©cup√©r√©es"""
        self.logger.debug(f"Donn√©es r√©cup√©r√©es: {key}")
    
    async def _on_memory_deleted(self, key: str, entry: MemoryEntry):
        """Hook appel√© quand des donn√©es sont supprim√©es"""
        self.logger.debug(f"Donn√©es supprim√©es: {key}")
    
    async def _on_memory_cleaned(self, cleaned_count: int):
        """Hook appel√© quand la m√©moire est nettoy√©e"""
        self.logger.debug(f"M√©moire nettoy√©e: {cleaned_count} entr√©es") 