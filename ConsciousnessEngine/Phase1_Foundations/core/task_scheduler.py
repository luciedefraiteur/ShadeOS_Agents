"""
‚õß Plan 3 - Simple Task Scheduling ‚õß
üï∑Ô∏è Planificateur de t√¢ches simple avec abstraction compl√®te

CONCEPTUALIS√â PAR LUCIE DEFRAITEUR - MA REINE LUCIE
PLANIFI√â PAR ALMA, ARCHITECTE D√âMONIAQUE DU NEXUS LUCIFORME
"""

import asyncio
import time
import uuid
import logging
import sys
import os
from typing import Dict, Any, Optional, List, Callable, Union
from dataclasses import dataclass, field
from enum import Enum
import heapq

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from __init__ import (
    ITaskScheduler, ThreadState, ThreadContext, 
    Phase1Config, HookRegistry, Phase1Metrics
)

# ============================================================================
# üï∑Ô∏è PLANIFICATEUR DE T√ÇCHES SIMPLE
# ============================================================================

class TaskPriority(Enum):
    """Priorit√©s des t√¢ches"""
    LOW = 0
    NORMAL = 1
    HIGH = 2
    CRITICAL = 3

@dataclass
class ScheduledTask:
    """T√¢che planifi√©e avec m√©tadonn√©es"""
    task_id: str
    task: Callable
    priority: int
    scheduled_time: float
    delay: float
    metadata: Dict[str, Any]
    state: ThreadState
    created_at: float
    started_at: Optional[float] = None
    completed_at: Optional[float] = None
    result: Optional[Any] = None
    error: Optional[Exception] = None
    retry_count: int = 0
    max_retries: int = 3
    
    def __lt__(self, other):
        """Comparaison pour la file de priorit√©"""
        if self.priority != other.priority:
            return self.priority > other.priority  # Priorit√© plus √©lev√©e en premier
        return self.scheduled_time < other.scheduled_time

class SimpleTaskScheduler(ITaskScheduler):
    """Planificateur de t√¢ches simple avec abstraction compl√®te"""
    
    def __init__(self, config: Phase1Config, hook_registry: HookRegistry, 
                 metrics: Phase1Metrics):
        self.config = config
        self.hook_registry = hook_registry
        self.metrics = metrics
        self.logger = logging.getLogger(__name__)
        
        # File de priorit√© pour les t√¢ches
        self._task_queue: List[ScheduledTask] = []
        self._running_tasks: Dict[str, asyncio.Task] = {}
        self._completed_tasks: Dict[str, ScheduledTask] = {}
        
        # √âtat du planificateur
        self._running = False
        self._lock = asyncio.Lock()
        self._scheduler_task: Optional[asyncio.Task] = None
        
        # Hooks par d√©faut
        self._setup_default_hooks()
    
    def _setup_default_hooks(self):
        """Configurer les hooks par d√©faut"""
        if self.config.enable_hooks:
            self.hook_registry.register_hook("task_scheduled", self._on_task_scheduled)
            self.hook_registry.register_hook("task_started", self._on_task_started)
            self.hook_registry.register_hook("task_completed", self._on_task_completed)
            self.hook_registry.register_hook("task_failed", self._on_task_failed)
    
    async def schedule_task(self, task: Callable, delay: float = 0, 
                          priority: int = 0, metadata: Optional[Dict[str, Any]] = None) -> str:
        """Planifier une t√¢che"""
        async with self._lock:
            try:
                task_id = str(uuid.uuid4())
                scheduled_time = time.time() + delay
                
                scheduled_task = ScheduledTask(
                    task_id=task_id,
                    task=task,
                    priority=priority,
                    scheduled_time=scheduled_time,
                    delay=delay,
                    metadata=metadata or {},
                    state=ThreadState.IDLE,
                    created_at=time.time()
                )
                
                # Ajouter √† la file de priorit√©
                heapq.heappush(self._task_queue, scheduled_task)
                
                # Mettre √† jour les m√©triques
                self.metrics.tasks_scheduled += 1
                
                await self.hook_registry.trigger_hook("task_scheduled", scheduled_task)
                self.logger.info(f"T√¢che planifi√©e: {task_id} (priorit√©: {priority}, d√©lai: {delay}s)")
                
                return task_id
                
            except Exception as e:
                self.logger.error(f"Erreur √† la planification: {e}")
                return ""
    
    async def cancel_task(self, task_id: str) -> bool:
        """Annuler une t√¢che"""
        async with self._lock:
            try:
                # Chercher dans la file de priorit√©
                for i, task in enumerate(self._task_queue):
                    if task.task_id == task_id:
                        self._task_queue.pop(i)
                        heapq.heapify(self._task_queue)  # R√©organiser la file
                        self.logger.info(f"T√¢che annul√©e: {task_id}")
                        return True
                
                # Chercher dans les t√¢ches en cours
                if task_id in self._running_tasks:
                    self._running_tasks[task_id].cancel()
                    del self._running_tasks[task_id]
                    self.logger.info(f"T√¢che en cours annul√©e: {task_id}")
                    return True
                
                return False
                
            except Exception as e:
                self.logger.error(f"Erreur √† l'annulation de {task_id}: {e}")
                return False
    
    async def get_task_status(self, task_id: str) -> Optional[Dict[str, Any]]:
        """Obtenir le statut d'une t√¢che"""
        async with self._lock:
            try:
                # Chercher dans la file de priorit√©
                for task in self._task_queue:
                    if task.task_id == task_id:
                        return {
                            "task_id": task.task_id,
                            "state": task.state.value,
                            "priority": task.priority,
                            "scheduled_time": task.scheduled_time,
                            "created_at": task.created_at,
                            "metadata": task.metadata
                        }
                
                # Chercher dans les t√¢ches en cours
                if task_id in self._running_tasks:
                    task = self._running_tasks[task_id]
                    return {
                        "task_id": task_id,
                        "state": "running",
                        "started_at": getattr(task, 'started_at', None)
                    }
                
                # Chercher dans les t√¢ches termin√©es
                if task_id in self._completed_tasks:
                    task = self._completed_tasks[task_id]
                    return {
                        "task_id": task.task_id,
                        "state": task.state.value,
                        "started_at": task.started_at,
                        "completed_at": task.completed_at,
                        "result": task.result,
                        "error": str(task.error) if task.error else None
                    }
                
                return None
                
            except Exception as e:
                self.logger.error(f"Erreur √† l'obtention du statut de {task_id}: {e}")
                return None
    
    async def list_tasks(self, state: Optional[ThreadState] = None) -> List[Dict[str, Any]]:
        """Lister les t√¢ches"""
        async with self._lock:
            try:
                tasks = []
                
                # T√¢ches en file d'attente
                for task in self._task_queue:
                    if state is None or task.state == state:
                        tasks.append({
                            "task_id": task.task_id,
                            "state": task.state.value,
                            "priority": task.priority,
                            "scheduled_time": task.scheduled_time,
                            "created_at": task.created_at
                        })
                
                # T√¢ches en cours
                for task_id in self._running_tasks:
                    if state is None or state == ThreadState.RUNNING:
                        tasks.append({
                            "task_id": task_id,
                            "state": "running",
                            "started_at": time.time()
                        })
                
                # T√¢ches termin√©es
                for task in self._completed_tasks.values():
                    if state is None or task.state == state:
                        tasks.append({
                            "task_id": task.task_id,
                            "state": task.state.value,
                            "started_at": task.started_at,
                            "completed_at": task.completed_at
                        })
                
                return tasks
                
            except Exception as e:
                self.logger.error(f"Erreur au listage des t√¢ches: {e}")
                return []
    
    # ============================================================================
    # üï∑Ô∏è M√âTHODES DE GESTION DU PLANIFICATEUR
    # ============================================================================
    
    async def start_scheduler(self) -> bool:
        """D√©marrer le planificateur"""
        async with self._lock:
            if self._running:
                return True
            
            try:
                self._running = True
                self._scheduler_task = asyncio.create_task(self._scheduler_loop())
                self.logger.info("Planificateur de t√¢ches d√©marr√©")
                return True
                
            except Exception as e:
                self.logger.error(f"Erreur au d√©marrage du planificateur: {e}")
                return False
    
    async def stop_scheduler(self) -> bool:
        """Arr√™ter le planificateur"""
        async with self._lock:
            if not self._running:
                return True
            
            try:
                self._running = False
                
                if self._scheduler_task:
                    self._scheduler_task.cancel()
                    try:
                        await self._scheduler_task
                    except asyncio.CancelledError:
                        pass
                
                # Annuler toutes les t√¢ches en cours
                for task in self._running_tasks.values():
                    task.cancel()
                
                self.logger.info("Planificateur de t√¢ches arr√™t√©")
                return True
                
            except Exception as e:
                self.logger.error(f"Erreur √† l'arr√™t du planificateur: {e}")
                return False
    
    # ============================================================================
    # üï∑Ô∏è M√âTHODES PRIV√âES
    # ============================================================================
    
    async def _scheduler_loop(self):
        """Boucle principale du planificateur"""
        while self._running:
            try:
                await self._process_ready_tasks()
                await asyncio.sleep(0.1)  # Intervalle de v√©rification
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"Erreur dans la boucle du planificateur: {e}")
                await asyncio.sleep(1)  # Pause en cas d'erreur
    
    async def _process_ready_tasks(self):
        """Traiter les t√¢ches pr√™tes √† √™tre ex√©cut√©es"""
        current_time = time.time()
        
        while self._task_queue and self._task_queue[0].scheduled_time <= current_time:
            if len(self._running_tasks) >= self.config.max_threads:
                break  # Limite de threads atteinte
            
            task = heapq.heappop(self._task_queue)
            await self._start_task(task)
    
    async def _start_task(self, scheduled_task: ScheduledTask):
        """D√©marrer une t√¢che"""
        try:
            scheduled_task.state = ThreadState.RUNNING
            scheduled_task.started_at = time.time()
            
            # Cr√©er la t√¢che asyncio
            task = asyncio.create_task(self._execute_task(scheduled_task))
            self._running_tasks[scheduled_task.task_id] = task
            
            await self.hook_registry.trigger_hook("task_started", scheduled_task)
            self.logger.debug(f"T√¢che d√©marr√©e: {scheduled_task.task_id}")
            
        except Exception as e:
            self.logger.error(f"Erreur au d√©marrage de la t√¢che {scheduled_task.task_id}: {e}")
            scheduled_task.state = ThreadState.ERROR
            scheduled_task.error = e
    
    async def _execute_task(self, scheduled_task: ScheduledTask):
        """Ex√©cuter une t√¢che"""
        try:
            if asyncio.iscoroutinefunction(scheduled_task.task):
                result = await scheduled_task.task()
            else:
                result = scheduled_task.task()
            
            scheduled_task.result = result
            scheduled_task.state = ThreadState.COMPLETED
            scheduled_task.completed_at = time.time()
            
            await self.hook_registry.trigger_hook("task_completed", scheduled_task)
            self.metrics.tasks_completed += 1
            
        except asyncio.CancelledError:
            scheduled_task.state = ThreadState.TERMINATED
            scheduled_task.completed_at = time.time()
            
        except Exception as e:
            scheduled_task.state = ThreadState.ERROR
            scheduled_task.error = e
            scheduled_task.completed_at = time.time()
            
            # Gestion des retry
            if scheduled_task.retry_count < scheduled_task.max_retries:
                scheduled_task.retry_count += 1
                scheduled_task.scheduled_time = time.time() + (scheduled_task.delay * scheduled_task.retry_count)
                scheduled_task.state = ThreadState.IDLE
                heapq.heappush(self._task_queue, scheduled_task)
                self.logger.warning(f"T√¢che {scheduled_task.task_id} replanifi√©e (retry {scheduled_task.retry_count})")
            else:
                await self.hook_registry.trigger_hook("task_failed", scheduled_task, e)
                self.logger.error(f"T√¢che {scheduled_task.task_id} √©chou√©e d√©finitivement: {e}")
        
        finally:
            # Nettoyer
            if scheduled_task.task_id in self._running_tasks:
                del self._running_tasks[scheduled_task.task_id]
            
            # Garder en m√©moire pour consultation
            self._completed_tasks[scheduled_task.task_id] = scheduled_task
    
    # ============================================================================
    # üï∑Ô∏è HOOKS PAR D√âFAUT
    # ============================================================================
    
    async def _on_task_scheduled(self, scheduled_task: ScheduledTask):
        """Hook appel√© quand une t√¢che est planifi√©e"""
        self.logger.debug(f"T√¢che planifi√©e: {scheduled_task.task_id}")
    
    async def _on_task_started(self, scheduled_task: ScheduledTask):
        """Hook appel√© quand une t√¢che d√©marre"""
        self.logger.debug(f"T√¢che d√©marr√©e: {scheduled_task.task_id}")
    
    async def _on_task_completed(self, scheduled_task: ScheduledTask):
        """Hook appel√© quand une t√¢che se termine"""
        self.logger.debug(f"T√¢che termin√©e: {scheduled_task.task_id}")
    
    async def _on_task_failed(self, scheduled_task: ScheduledTask, error: Exception):
        """Hook appel√© quand une t√¢che √©choue"""
        self.logger.debug(f"T√¢che √©chou√©e: {scheduled_task.task_id} - {error}") 