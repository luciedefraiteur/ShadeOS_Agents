#!/usr/bin/env python3
# ðŸ”¨ Calculatrice CorrigÃ©e par Forge âš¡
# MaÃ®tre Forgeron du Code - Bugs Ã©liminÃ©s avec prÃ©cision divine !

class Calculator:
    def __init__(self):
        self.history = []

    def add(self, a, b):
        # Addition avec validation des types
        try:
            if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
                raise TypeError("Les arguments doivent Ãªtre des nombres")

            result = a + b
            self.history.append(f"{a} + {b} = {result}")
            return result
        except Exception as e:
            self.history.append(f"Erreur addition: {e}")
            raise

    def subtract(self, a, b):
        # Soustraction corrigÃ©e (a - b)
        try:
            if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
                raise TypeError("Les arguments doivent Ãªtre des nombres")

            result = a - b  # CORRIGÃ‰: Ã©tait b - a
            self.history.append(f"{a} - {b} = {result}")
            return result
        except Exception as e:
            self.history.append(f"Erreur soustraction: {e}")
            raise

    def multiply(self, a, b):
        # Multiplication corrigÃ©e (a * b)
        try:
            if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
                raise TypeError("Les arguments doivent Ãªtre des nombres")

            result = a * b  # CORRIGÃ‰: Ã©tait a / b
            self.history.append(f"{a} * {b} = {result}")
            return result
        except Exception as e:
            self.history.append(f"Erreur multiplication: {e}")
            raise

    def divide(self, a, b):
        # Division avec gestion de la division par zÃ©ro
        try:
            if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
                raise TypeError("Les arguments doivent Ãªtre des nombres")

            if b == 0:  # CORRIGÃ‰: gestion division par zÃ©ro
                raise ZeroDivisionError("Division par zÃ©ro impossible")

            result = a / b
            self.history.append(f"{a} / {b} = {result}")
            return result
        except Exception as e:
            self.history.append(f"Erreur division: {e}")
            raise

    def power(self, a, b):
        # Puissance corrigÃ©e (a ** b)
        try:
            if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
                raise TypeError("Les arguments doivent Ãªtre des nombres")

            result = a ** b  # CORRIGÃ‰: Ã©tait a + b
            self.history.append(f"{a} ^ {b} = {result}")
            return result
        except Exception as e:
            self.history.append(f"Erreur puissance: {e}")
            raise

    def get_history(self):
        # Retourne l historique des opÃ©rations
        return self.history.copy()

    def clear_history(self):
        # Efface l historique - CORRIGÃ‰
        self.history.clear()  # CORRIGÃ‰: Ã©tait pass

# ðŸ”¨ Par la forge cosmique, les bugs sont CRISTALLISÃ‰S en perfection ! âš¡
