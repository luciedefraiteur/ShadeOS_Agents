#!/usr/bin/env python3
"""
üß™ Runner Principal - Tests Unitaires MemoryEngine ‚õß

Script principal pour ex√©cuter tous les tests unitaires du MemoryEngine
et identifier les d√©pendances manquantes.

Cr√©√© par Alma, Architecte D√©moniaque du Nexus Luciforme.
"""

import sys
import os
import unittest
from pathlib import Path

# Ajouter le r√©pertoire parent au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

def run_all_tests():
    """Ex√©cute tous les tests unitaires."""
    
    print("üß™ ‚õß SUITE COMPL√àTE DE TESTS MEMORYENGINE ‚õß üß™")
    print("=" * 60)
    
    # Importer les modules de test
    test_modules = [
        "test_memory_engine_core",
        "test_extensions", 
        "test_editing_session",
        "test_process_manager"
    ]
    
    # R√©sultats globaux
    total_tests = 0
    total_failures = 0
    total_errors = 0
    total_skipped = 0
    missing_dependencies = []
    
    # Ex√©cuter chaque module de test
    for module_name in test_modules:
        print(f"\nüîç Test du module: {module_name}")
        print("-" * 40)
        
        try:
            # Importer le module de test
            module = __import__(f"MemoryEngine.UnitTests.{module_name}", fromlist=['run_tests'])
            
            # Ex√©cuter les tests
            result = module.run_tests()
            
            # Collecter les statistiques
            total_tests += result.testsRun
            total_failures += len(result.failures)
            total_errors += len(result.errors)
            total_skipped += len(result.skipped)
            
            # Analyser les erreurs pour identifier les d√©pendances manquantes
            for test, traceback in result.errors:
                if "ImportError" in str(traceback):
                    missing_dependencies.append(f"{module_name}: {test}")
                    
        except ImportError as e:
            print(f"‚ùå Module de test non trouv√©: {module_name}")
            missing_dependencies.append(f"{module_name}: Module non trouv√©")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'ex√©cution des tests {module_name}: {e}")
            missing_dependencies.append(f"{module_name}: Erreur d'ex√©cution")
    
    # R√©sum√© global
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â GLOBAL DES TESTS")
    print("=" * 60)
    print(f"Tests ex√©cut√©s: {total_tests}")
    print(f"√âchecs: {total_failures}")
    print(f"Erreurs: {total_errors}")
    print(f"Tests ignor√©s: {total_skipped}")
    print(f"Taux de succ√®s: {((total_tests - total_failures - total_errors) / max(total_tests, 1)) * 100:.1f}%")
    
    # Analyse des d√©pendances manquantes
    if missing_dependencies:
        print(f"\n‚ö†Ô∏è  D√âPENDANCES MANQUANTES IDENTIFI√âES:")
        print("-" * 40)
        for dep in missing_dependencies:
            print(f"  ‚Ä¢ {dep}")
        
        print(f"\nüí° RECOMMANDATIONS:")
        print("-" * 20)
        print("1. V√©rifier que tous les modules ont √©t√© copi√©s depuis Core/")
        print("2. V√©rifier les imports dans les fichiers __init__.py")
        print("3. V√©rifier les d√©pendances externes (Neo4j, etc.)")
        print("4. V√©rifier la structure des dossiers")
    else:
        print(f"\n‚úÖ Aucune d√©pendance manquante identifi√©e!")
    
    # Suggestions d'am√©lioration
    print(f"\nüîß SUGGESTIONS D'AM√âLIORATION:")
    print("-" * 30)
    if total_errors > 0:
        print("‚Ä¢ Corriger les erreurs d'import avant de continuer")
    if total_failures > 0:
        print("‚Ä¢ Analyser les √©checs de tests pour identifier les bugs")
    if total_skipped > 0:
        print("‚Ä¢ Installer les d√©pendances manquantes pour les tests ignor√©s")
    
    print("‚Ä¢ Consid√©rer l'ajout de tests d'int√©gration")
    print("‚Ä¢ Ajouter des tests de performance")
    print("‚Ä¢ Impl√©menter des tests de stress")
    
    return {
        'total_tests': total_tests,
        'total_failures': total_failures,
        'total_errors': total_errors,
        'total_skipped': total_skipped,
        'missing_dependencies': missing_dependencies
    }


def analyze_missing_components():
    """Analyse les composants potentiellement manquants."""
    
    print(f"\nüîç ANALYSE DES COMPOSANTS MANQUANTS")
    print("=" * 50)
    
    # V√©rifier la structure des dossiers
    expected_structure = [
        "MemoryEngine/core/",
        "MemoryEngine/extensions/",
        "MemoryEngine/backends/",
        "MemoryEngine/parsers/",
        "MemoryEngine/utils/",
        "MemoryEngine/EditingSession/",
        "MemoryEngine/ProcessManager/",
        "MemoryEngine/UnitTests/"
    ]
    
    missing_dirs = []
    for dir_path in expected_structure:
        if not os.path.exists(dir_path):
            missing_dirs.append(dir_path)
    
    if missing_dirs:
        print("üìÅ Dossiers manquants:")
        for dir_path in missing_dirs:
            print(f"  ‚Ä¢ {dir_path}")
    else:
        print("‚úÖ Tous les dossiers sont pr√©sents")
    
    # V√©rifier les fichiers cl√©s
    key_files = [
        "MemoryEngine/__init__.py",
        "MemoryEngine/core/engine.py",
        "MemoryEngine/core/memory_node.py",
        "MemoryEngine/extensions/tool_memory_extension.py",
        "MemoryEngine/extensions/tool_search_extension.py",
        "MemoryEngine/EditingSession/__init__.py",
        "MemoryEngine/ProcessManager/__init__.py"
    ]
    
    missing_files = []
    for file_path in key_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("\nüìÑ Fichiers cl√©s manquants:")
        for file_path in missing_files:
            print(f"  ‚Ä¢ {file_path}")
    else:
        print("\n‚úÖ Tous les fichiers cl√©s sont pr√©sents")
    
    return {
        'missing_dirs': missing_dirs,
        'missing_files': missing_files
    }


def generate_report(results, analysis):
    """G√©n√®re un rapport d√©taill√©."""
    
    report = f"""
# üìã Rapport de Tests MemoryEngine

## R√©sum√© Ex√©cutif
- **Tests ex√©cut√©s**: {results['total_tests']}
- **√âchecs**: {results['total_failures']}
- **Erreurs**: {results['total_errors']}
- **Tests ignor√©s**: {results['total_skipped']}
- **Taux de succ√®s**: {((results['total_tests'] - results['total_failures'] - results['total_errors']) / max(results['total_tests'], 1)) * 100:.1f}%

## D√©pendances Manquantes
"""
    
    if results['missing_dependencies']:
        for dep in results['missing_dependencies']:
            report += f"- {dep}\n"
    else:
        report += "- Aucune d√©pendance manquante identifi√©e\n"
    
    report += f"""
## Structure du Projet
"""
    
    if analysis['missing_dirs']:
        report += "### Dossiers Manquants\n"
        for dir_path in analysis['missing_dirs']:
            report += f"- {dir_path}\n"
    
    if analysis['missing_files']:
        report += "### Fichiers Manquants\n"
        for file_path in analysis['missing_files']:
            report += f"- {file_path}\n"
    
    report += f"""
## Recommandations

### Priorit√© Haute
1. Corriger les erreurs d'import critiques
2. Copier les composants manquants depuis Core/
3. V√©rifier la coh√©rence des imports

### Priorit√© Moyenne
1. Installer les d√©pendances externes
2. Ajouter des tests d'int√©gration
3. Impl√©menter la gestion d'erreurs

### Priorit√© Basse
1. Optimiser les performances
2. Ajouter des tests de stress
3. Am√©liorer la documentation
"""
    
    # Sauvegarder le rapport
    report_file = "MemoryEngine/UnitTests/test_report.md"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\nüìÑ Rapport g√©n√©r√©: {report_file}")


if __name__ == "__main__":
    # Ex√©cuter tous les tests
    results = run_all_tests()
    
    # Analyser les composants manquants
    analysis = analyze_missing_components()
    
    # G√©n√©rer le rapport
    generate_report(results, analysis)
    
    print(f"\nüèÅ Tests termin√©s. Consultez le rapport pour plus de d√©tails.") 