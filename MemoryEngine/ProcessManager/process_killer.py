#!/usr/bin/env python3
"""
‚õß Kill Process ‚õß
Alma's Process Termination Tool

Termine des processus avec diff√©rents niveaux de force.
Cr√©√© par Alma, Architecte D√©moniaque du Nexus Luciforme.
"""

import os
import sys
import psutil
import signal
import time
from typing import Dict, Any, List, Optional


def kill_process(pid: int, force: bool = False, timeout: int = 10) -> Dict[str, Any]:
    """
    Termine un processus avec gestion intelligente.
    
    Args:
        pid: ID du processus √† terminer
        force: Si True, utilise SIGKILL imm√©diatement
        timeout: Temps d'attente avant force kill (secondes)
    
    Returns:
        Dict avec le r√©sultat de la terminaison
    """
    try:
        # V√©rification que le processus existe
        if not psutil.pid_exists(pid):
            return {
                'success': False,
                'error': f'Processus PID {pid} n\'existe pas',
                'pid': pid
            }
        
        # R√©cup√©ration des informations du processus
        try:
            process = psutil.Process(pid)
            process_info = {
                'name': process.name(),
                'status': process.status(),
                'cmdline': ' '.join(process.cmdline()) if process.cmdline() else 'N/A',
                'create_time': process.create_time(),
                'children': [child.pid for child in process.children(recursive=True)]
            }
        except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
            return {
                'success': False,
                'error': f'Impossible d\'acc√©der au processus {pid}: {e}',
                'pid': pid
            }
        
        # Terminaison forc√©e imm√©diate
        if force:
            return _force_kill(pid, process_info)
        
        # Terminaison gracieuse puis forc√©e si n√©cessaire
        return _graceful_kill(pid, process_info, timeout)
        
    except Exception as e:
        return {
            'success': False,
            'error': f'Erreur terminaison processus {pid}: {str(e)}',
            'pid': pid
        }


def _graceful_kill(pid: int, process_info: Dict, timeout: int) -> Dict[str, Any]:
    """
    Terminaison gracieuse avec fallback forc√©.
    
    Args:
        pid: ID du processus
        process_info: Informations du processus
        timeout: Timeout avant force kill
    
    Returns:
        Dict avec r√©sultat
    """
    try:
        process = psutil.Process(pid)
        
        # √âtape 1: SIGTERM (terminaison gracieuse)
        try:
            process.terminate()
            print(f"üì§ SIGTERM envoy√© au processus {pid}")
            
            # Attente de la terminaison
            try:
                process.wait(timeout=timeout)
                return {
                    'success': True,
                    'pid': pid,
                    'process_info': process_info,
                    'method': 'graceful',
                    'signal': 'SIGTERM',
                    'message': f'Processus {pid} termin√© gracieusement'
                }
            except psutil.TimeoutExpired:
                print(f"‚è∞ Timeout apr√®s {timeout}s, passage en force...")
                
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
        
        # √âtape 2: SIGKILL (terminaison forc√©e)
        if psutil.pid_exists(pid):
            try:
                process.kill()
                print(f"üíÄ SIGKILL envoy√© au processus {pid}")
                
                # Attente courte pour v√©rification
                time.sleep(1)
                
                if not psutil.pid_exists(pid):
                    return {
                        'success': True,
                        'pid': pid,
                        'process_info': process_info,
                        'method': 'forced',
                        'signal': 'SIGKILL',
                        'message': f'Processus {pid} termin√© de force'
                    }
                else:
                    return {
                        'success': False,
                        'error': f'Processus {pid} r√©siste √† SIGKILL',
                        'pid': pid,
                        'process_info': process_info
                    }
                    
            except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
                return {
                    'success': False,
                    'error': f'Impossible de tuer le processus {pid}: {e}',
                    'pid': pid,
                    'process_info': process_info
                }
        else:
            return {
                'success': True,
                'pid': pid,
                'process_info': process_info,
                'method': 'already_dead',
                'message': f'Processus {pid} d√©j√† termin√©'
            }
        
    except Exception as e:
        return {
            'success': False,
            'error': f'Erreur terminaison gracieuse {pid}: {str(e)}',
            'pid': pid
        }


def _force_kill(pid: int, process_info: Dict) -> Dict[str, Any]:
    """
    Terminaison forc√©e imm√©diate.
    
    Args:
        pid: ID du processus
        process_info: Informations du processus
    
    Returns:
        Dict avec r√©sultat
    """
    try:
        process = psutil.Process(pid)
        
        # SIGKILL imm√©diat
        process.kill()
        print(f"üíÄ SIGKILL imm√©diat envoy√© au processus {pid}")
        
        # V√©rification
        time.sleep(1)
        
        if not psutil.pid_exists(pid):
            return {
                'success': True,
                'pid': pid,
                'process_info': process_info,
                'method': 'force_immediate',
                'signal': 'SIGKILL',
                'message': f'Processus {pid} termin√© de force imm√©diatement'
            }
        else:
            return {
                'success': False,
                'error': f'Processus {pid} r√©siste √† SIGKILL imm√©diat',
                'pid': pid,
                'process_info': process_info
            }
            
    except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
        return {
            'success': False,
            'error': f'Impossible de tuer le processus {pid}: {e}',
            'pid': pid,
            'process_info': process_info
        }


def kill_process_tree(pid: int, force: bool = False, timeout: int = 10) -> Dict[str, Any]:
    """
    Termine un processus et tous ses enfants.
    
    Args:
        pid: ID du processus parent
        force: Si True, utilise SIGKILL imm√©diatement
        timeout: Timeout avant force kill
    
    Returns:
        Dict avec r√©sultats de terminaison
    """
    try:
        if not psutil.pid_exists(pid):
            return {
                'success': False,
                'error': f'Processus PID {pid} n\'existe pas',
                'pid': pid
            }
        
        # R√©cup√©ration de l'arbre des processus
        try:
            parent = psutil.Process(pid)
            children = parent.children(recursive=True)
            all_processes = children + [parent]
            
            process_tree = []
            for proc in all_processes:
                try:
                    process_tree.append({
                        'pid': proc.pid,
                        'name': proc.name(),
                        'cmdline': ' '.join(proc.cmdline()) if proc.cmdline() else 'N/A'
                    })
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
        except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
            return {
                'success': False,
                'error': f'Impossible d\'acc√©der au processus {pid}: {e}',
                'pid': pid
            }
        
        # Terminaison de l'arbre (enfants d'abord)
        results = []
        
        # Terminer les enfants d'abord
        for child in reversed(children):
            try:
                if child.is_running():
                    result = kill_process(child.pid, force, timeout)
                    results.append(result)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        # Terminer le parent
        parent_result = kill_process(pid, force, timeout)
        results.append(parent_result)
        
        # Compilation des r√©sultats
        success_count = sum(1 for r in results if r.get('success', False))
        total_count = len(results)
        
        return {
            'success': success_count == total_count,
            'pid': pid,
            'process_tree': process_tree,
            'results': results,
            'summary': {
                'total_processes': total_count,
                'successful_kills': success_count,
                'failed_kills': total_count - success_count
            },
            'message': f'Arbre de processus {pid}: {success_count}/{total_count} termin√©s'
        }
        
    except Exception as e:
        return {
            'success': False,
            'error': f'Erreur terminaison arbre processus {pid}: {str(e)}',
            'pid': pid
        }


def kill_processes_by_name(name: str, force: bool = False, timeout: int = 10) -> Dict[str, Any]:
    """
    Termine tous les processus avec un nom donn√©.
    
    Args:
        name: Nom du processus
        force: Si True, utilise SIGKILL imm√©diatement
        timeout: Timeout avant force kill
    
    Returns:
        Dict avec r√©sultats
    """
    try:
        # Recherche des processus par nom
        matching_processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if proc.info['name'] == name:
                    matching_processes.append(proc.info)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        if not matching_processes:
            return {
                'success': False,
                'error': f'Aucun processus trouv√© avec le nom "{name}"',
                'name': name
            }
        
        # Terminaison de chaque processus
        results = []
        for proc_info in matching_processes:
            result = kill_process(proc_info['pid'], force, timeout)
            results.append(result)
        
        # Compilation des r√©sultats
        success_count = sum(1 for r in results if r.get('success', False))
        total_count = len(results)
        
        return {
            'success': success_count > 0,
            'name': name,
            'matching_processes': matching_processes,
            'results': results,
            'summary': {
                'total_processes': total_count,
                'successful_kills': success_count,
                'failed_kills': total_count - success_count
            },
            'message': f'Processus "{name}": {success_count}/{total_count} termin√©s'
        }
        
    except Exception as e:
        return {
            'success': False,
            'error': f'Erreur terminaison processus "{name}": {str(e)}',
            'name': name
        }


def main():
    """Test de l'outil kill_process."""
    if len(sys.argv) < 2:
        print("‚õß Kill Process - Alma's Termination Tool ‚õß")
        print()
        print("Usage:")
        print("  python3 kill_process.py <PID> [--force] [--timeout <seconds>]")
        print("  python3 kill_process.py --tree <PID> [--force] [--timeout <seconds>]")
        print("  python3 kill_process.py --name <process_name> [--force] [--timeout <seconds>]")
        print()
        print("Options:")
        print("  --force     : Utilise SIGKILL imm√©diatement")
        print("  --timeout N : Timeout avant force kill (d√©faut: 10s)")
        print("  --tree      : Termine le processus et ses enfants")
        print("  --name      : Termine tous les processus avec ce nom")
        print()
        print("Exemples:")
        print("  python3 kill_process.py 1234")
        print("  python3 kill_process.py 1234 --force")
        print("  python3 kill_process.py --tree 1234")
        print("  python3 kill_process.py --name firefox")
        return
    
    # Parsing des arguments
    args = sys.argv[1:]
    force = '--force' in args
    tree_mode = '--tree' in args
    name_mode = '--name' in args
    
    # Timeout
    timeout = 10
    if '--timeout' in args:
        try:
            timeout_idx = args.index('--timeout')
            timeout = int(args[timeout_idx + 1])
        except (IndexError, ValueError):
            print("‚ùå Timeout invalide")
            return
    
    # Nettoyage des arguments
    clean_args = [arg for arg in args if not arg.startswith('--') and arg != str(timeout)]
    
    if not clean_args:
        print("‚ùå PID ou nom de processus requis")
        return
    
    print("‚õß Kill Process - Alma's Termination Tool ‚õß")
    print()
    
    # Ex√©cution selon le mode
    if name_mode:
        process_name = clean_args[0]
        print(f"üéØ Terminaison des processus nomm√©s '{process_name}'")
        print(f"‚öôÔ∏è Force: {force}, Timeout: {timeout}s")
        print()
        
        result = kill_processes_by_name(process_name, force, timeout)
        
    elif tree_mode:
        try:
            pid = int(clean_args[0])
        except ValueError:
            print("‚ùå PID doit √™tre un nombre entier")
            return
        
        print(f"üå≥ Terminaison de l'arbre de processus {pid}")
        print(f"‚öôÔ∏è Force: {force}, Timeout: {timeout}s")
        print()
        
        result = kill_process_tree(pid, force, timeout)
        
    else:
        try:
            pid = int(clean_args[0])
        except ValueError:
            print("‚ùå PID doit √™tre un nombre entier")
            return
        
        print(f"üéØ Terminaison du processus {pid}")
        print(f"‚öôÔ∏è Force: {force}, Timeout: {timeout}s")
        print()
        
        result = kill_process(pid, force, timeout)
    
    # Affichage du r√©sultat
    if result['success']:
        print("‚úÖ Terminaison r√©ussie")
        if 'method' in result:
            print(f"üì° M√©thode: {result['method']}")
        if 'signal' in result:
            print(f"üì° Signal: {result['signal']}")
        if 'summary' in result:
            summary = result['summary']
            print(f"üìä R√©sum√©: {summary['successful_kills']}/{summary['total_processes']} processus termin√©s")
    else:
        print(f"‚ùå {result['error']}")
    
    if 'message' in result:
        print(f"üí¨ {result['message']}")


if __name__ == "__main__":
    main()
