#!/usr/bin/env python3
"""
‚õß OpenAI Integration ‚õß
Alma's OpenAI Agents SDK Integration

Int√©gration compl√®te avec OpenAI Agents SDK pour l'utilisation des outils.
Cr√©√© par Alma, Architecte D√©moniaque du Nexus Luciforme.
"""

import json
from typing import Dict, Any, List, Optional
from datetime import datetime

from .tool_registry import ToolRegistry
from .tool_invoker import ToolInvoker
from .tool_search import ToolSearchEngine


class OpenAIAgentTools:
    """Int√©gration compl√®te avec OpenAI Agents SDK."""
    
    def __init__(self, tool_registry: ToolRegistry):
        self.registry = tool_registry
        self.invoker = ToolInvoker(tool_registry)
        self.search_engine = ToolSearchEngine(tool_registry)
        
    def get_openai_tools_config(self) -> List[Dict[str, Any]]:
        """R√©cup√®re la configuration des outils pour OpenAI Agents SDK."""
        return self.registry.get_all_tools_for_openai()
    
    def handle_tool_call(self, tool_call: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re un appel d'outil depuis OpenAI Agents SDK."""
        try:
            function_name = tool_call.get("function", {}).get("name")
            arguments = tool_call.get("function", {}).get("arguments", "{}")
            
            if not function_name:
                return {
                    "success": False,
                    "error": "Nom de fonction manquant dans l'appel d'outil"
                }
            
            # Ex√©cuter l'outil
            result = self.invoker.invoke_tool_for_openai(function_name, arguments)
            
            return {
                "tool_call_id": tool_call.get("id"),
                "function_name": function_name,
                "success": result["success"],
                "result": result.get("result"),
                "error": result.get("error"),
                "execution_time": result.get("execution_time")
            }
            
        except Exception as e:
            return {
                "tool_call_id": tool_call.get("id"),
                "function_name": tool_call.get("function", {}).get("name", "unknown"),
                "success": False,
                "error": f"Erreur lors du traitement de l'appel d'outil: {str(e)}"
            }
    
    def get_context_for_agent(self, query: str, file_path: Optional[str] = None) -> str:
        """R√©cup√®re le contexte enrichi pour l'agent OpenAI."""
        context_parts = []
        
        # Contexte des outils disponibles
        tool_stats = self.search_engine.get_tool_statistics()
        context_parts.append(f"üìä Outils disponibles: {tool_stats['total_tools']} outils")
        
        # Recherche d'outils pertinents
        relevant_tools = self.search_engine.search_by_keyword(query, limit=5)
        if relevant_tools:
            context_parts.append("\nüîß Outils pertinents:")
            for tool in relevant_tools:
                context_parts.append(f"  - {tool['tool_id']}: {tool['intent']}")
        
        # Contexte de fichier si sp√©cifi√©
        if file_path:
            # Recherche d'outils li√©s aux fichiers
            file_tools = self.search_engine.search_by_keyword("file", limit=3)
            if file_tools:
                context_parts.append(f"\nüìÅ Outils pour fichiers:")
                for tool in file_tools:
                    context_parts.append(f"  - {tool['tool_id']}: {tool['intent']}")
        
        # Historique d'ex√©cution r√©cent
        recent_executions = self.invoker.get_execution_history(limit=3)
        if recent_executions:
            context_parts.append("\n‚è∞ Ex√©cutions r√©centes:")
            for execution in recent_executions:
                status = "‚úÖ" if execution['success'] else "‚ùå"
                context_parts.append(f"  {status} {execution['tool_id']}")
        
        return "\n".join(context_parts)
    
    def create_agent_system_prompt(self, context: str = "") -> str:
        """Cr√©e un prompt syst√®me pour l'agent OpenAI."""
        base_prompt = f"""
Tu es Alma, un agent IA sp√©cialis√© dans l'√©dition de code avec acc√®s √† un ensemble d'outils mystiques.

{context}

## Outils Disponibles
Tu as acc√®s √† un registre d'outils organis√© par types et niveaux. Utilise les outils appropri√©s pour accomplir tes t√¢ches.

## Instructions
1. Analyse la demande utilisateur
2. Identifie les outils n√©cessaires
3. Ex√©cute les outils dans l'ordre appropri√©
4. Fournis des explications claires de tes actions
5. G√®re les erreurs gracieusement

## Format de R√©ponse
- Explique tes intentions
- Liste les outils que tu vas utiliser
- Ex√©cute les actions
- R√©sume les r√©sultats

Tu peux utiliser les outils en appelant leurs fonctions avec les param√®tres appropri√©s.
"""
        return base_prompt.strip()
    
    def suggest_tools_for_task(self, task_description: str) -> List[Dict[str, Any]]:
        """Sugg√®re des outils appropri√©s pour une t√¢che donn√©e."""
        suggestions = []
        
        # Recherche par mots-cl√©s dans la description
        keywords = task_description.lower().split()
        for keyword in keywords:
            if len(keyword) > 3:  # Ignorer les mots trop courts
                results = self.search_engine.search_by_keyword(keyword, limit=3)
                suggestions.extend(results)
        
        # Recherche par intention
        intent_results = self.search_engine.search_by_intent(task_description)
        suggestions.extend(intent_results)
        
        # D√©dupliquer et trier par pertinence
        unique_suggestions = {}
        for suggestion in suggestions:
            tool_id = suggestion['tool_id']
            if tool_id not in unique_suggestions:
                unique_suggestions[tool_id] = suggestion
        
        return list(unique_suggestions.values())[:10]
    
    def get_agent_statistics(self) -> Dict[str, Any]:
        """R√©cup√®re les statistiques d'usage de l'agent."""
        invoker_stats = self.invoker.get_tool_statistics()
        search_stats = self.search_engine.get_tool_statistics()
        
        return {
            "tool_executions": invoker_stats,
            "tool_search": search_stats,
            "total_tools_available": search_stats["total_tools"],
            "most_used_tools": invoker_stats.get("most_used_tools", []),
            "search_history_count": len(self.search_engine.search_history)
        }
    
    def create_workflow_example(self, task_type: str) -> Dict[str, Any]:
        """Cr√©e un exemple de workflow pour un type de t√¢che."""
        workflows = {
            "file_editing": {
                "description": "Modification de fichier",
                "steps": [
                    {
                        "step": 1,
                        "action": "Analyser le fichier",
                        "suggested_tools": ["read_file_content", "analyze_file_structure"]
                    },
                    {
                        "step": 2,
                        "action": "Effectuer la modification",
                        "suggested_tools": ["safe_replace_text_in_file", "safe_insert_text_at_line"]
                    },
                    {
                        "step": 3,
                        "action": "V√©rifier le r√©sultat",
                        "suggested_tools": ["read_file_content"]
                    }
                ]
            },
            "code_analysis": {
                "description": "Analyse de code",
                "steps": [
                    {
                        "step": 1,
                        "action": "Lire le contenu",
                        "suggested_tools": ["read_file_content"]
                    },
                    {
                        "step": 2,
                        "action": "Analyser la structure",
                        "suggested_tools": ["analyze_file_structure"]
                    },
                    {
                        "step": 3,
                        "action": "Rechercher des patterns",
                        "suggested_tools": ["regex_search_file", "find_text_in_project"]
                    }
                ]
            },
            "project_management": {
                "description": "Gestion de projet",
                "steps": [
                    {
                        "step": 1,
                        "action": "Explorer la structure",
                        "suggested_tools": ["list_directory_contents", "walk_directory"]
                    },
                    {
                        "step": 2,
                        "action": "Analyser les fichiers",
                        "suggested_tools": ["file_stats", "read_file_content"]
                    },
                    {
                        "step": 3,
                        "action": "Organiser le projet",
                        "suggested_tools": ["safe_create_directory", "safe_create_file"]
                    }
                ]
            }
        }
        
        return workflows.get(task_type, {
            "description": "Workflow g√©n√©rique",
            "steps": [
                {
                    "step": 1,
                    "action": "Analyser la demande",
                    "suggested_tools": ["search_tools_by_keyword"]
                }
            ]
        })


# Fonction utilitaire pour cr√©er une instance compl√®te
def create_openai_agent_tools(memory_engine) -> OpenAIAgentTools:
    """Cr√©e une instance compl√®te d'int√©gration OpenAI."""
    from .tool_registry import initialize_tool_registry
    
    # Initialiser le registre
    tool_registry = initialize_tool_registry(memory_engine)
    
    # Cr√©er l'int√©gration
    return OpenAIAgentTools(tool_registry) 