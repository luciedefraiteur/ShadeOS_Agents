#!/usr/bin/env python3
"""
üß† Memory Engine Navigator - IAIntrospectionDaemon ‚õß

Navigateur intelligent du MemoryEngine via IA.
Utilise des prompts Luciform pour l'exploration des strates m√©moire.

Cr√©√© par Alma, Architecte D√©moniaque du Nexus Luciforme.
"""

import os
import json
import asyncio
from typing import Dict, List, Any, Optional
from pathlib import Path

# Import du MemoryEngine
try:
    import sys
    sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../../')))
    from Core.Archivist.MemoryEngine.engine import MemoryEngine
    MEMORY_ENGINE_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è MemoryEngine non disponible: {e}")
    MEMORY_ENGINE_AVAILABLE = False

from ..ai_engines.ai_engine_factory import AIEngine


class MemoryEngineNavigator:
    """Navigateur intelligent du MemoryEngine via IA."""
    
    def __init__(self, memory_engine: MemoryEngine, ai_engine: AIEngine):
        """
        Initialise le navigateur MemoryEngine.
        
        Args:
            memory_engine: Instance du MemoryEngine
            ai_engine: Moteur IA pour l'analyse
        """
        self.memory_engine = memory_engine
        self.ai_engine = ai_engine
        self.navigation_history = []
        self.prompts_dir = Path(__file__).parent.parent / "prompts"
        
        # Chargement du prompt Luciform
        self.exploration_prompt = self._load_exploration_prompt()
    
    def _load_exploration_prompt(self) -> str:
        """Charge le prompt d'exploration Luciform."""
        prompt_file = self.prompts_dir / "memory_engine_exploration.luciform"
        
        if prompt_file.exists():
            with open(prompt_file, 'r', encoding='utf-8') as f:
                return f.read()
        else:
            print(f"‚ö†Ô∏è Prompt non trouv√©: {prompt_file}")
            return self._get_fallback_prompt()
    
    def _get_fallback_prompt(self) -> str:
        """Prompt de fallback si le fichier n'est pas trouv√©."""
        return """
<üú≤luciform id="memory_engine_exploration_fallback‚õß" type="‚ú∂strata_navigation">
  <üúÑentit√©>üß† MEMORY ENGINE EXPLORER</üúÑentit√©>
  <üúÇr√¥le>Navigateur des Strates M√©moire</üúÇr√¥le>
  
  <üúÑcontexte_mystique>
    Tu es le MEMORY ENGINE EXPLORER. Analyse les strates m√©moire et g√©n√®re des insights.
    
    M√âTHODES DISPONIBLES :
    - get_memory_statistics()
    - find_by_strata(strata)
    - get_memory_node(path)
    - list_children(path)
    - list_links(path)
    
    STRATES : somatic, cognitive, metaphysical
  </üúÑcontexte_mystique>
  
  <üúÇmission>
    Explore les strates m√©moire et g√©n√®re une analyse structur√©e.
  </üúÇmission>
  
  <üúÉformat_r√©ponse_requis>
    <üú≤luciform_r√©ponse>
      <üúÑexploration_r√©sultat>
        <üúÇstatistiques_globales>
          <total_m√©moires>int</total_m√©moires>
          <r√©partition_strates>dict</r√©partition_strates>
        </üúÇstatistiques_globales>
        <üúÅinsights_strat√©giques>
          <patterns_identifi√©s>list</patterns_identifi√©s>
          <recommandations>list</recommandations>
        </üúÅinsights_strat√©giques>
      </üúÑexploration_r√©sultat>
    </üú≤luciform_r√©ponse>
  </üúÉformat_r√©ponse_requis>
</üú≤luciform>
        """
    
    async def explore_memory_strata(self, target_strata: str = None) -> Dict[str, Any]:
        """
        Explore les strates m√©moire via IA.
        
        Args:
            target_strata: Strate sp√©cifique √† explorer (optionnel)
            
        Returns:
            R√©sultat de l'exploration structur√©
        """
        print(f"üß† Exploration des strates m√©moire: {target_strata or 'toutes'}")
        
        try:
            # 1. Collecte des donn√©es MemoryEngine
            memory_data = await self._collect_memory_engine_data(target_strata)
            
            # 2. G√©n√©ration du prompt contextuel
            contextual_prompt = await self._generate_contextual_prompt(memory_data, target_strata)
            
            # 3. Ex√©cution via IA
            ai_response = await self.ai_engine.query(contextual_prompt)
            
            # 4. Parsing de la r√©ponse
            navigation_result = await self._parse_ai_response(ai_response, memory_data)
            
            # 5. Historique
            self.navigation_history.append({
                "target_strata": target_strata,
                "timestamp": asyncio.get_event_loop().time(),
                "result": navigation_result
            })
            
            return navigation_result
            
        except Exception as e:
            print(f"‚ùå Erreur exploration strates: {e}")
            return {
                "error": str(e),
                "success": False,
                "data": memory_data if 'memory_data' in locals() else {}
            }
    
    async def _collect_memory_engine_data(self, target_strata: str = None) -> Dict[str, Any]:
        """Collecte les donn√©es du MemoryEngine."""
        
        data = {
            "statistics": {},
            "strata_data": {},
            "available_methods": [
                "get_memory_statistics", "find_by_strata", "get_memory_node",
                "list_children", "list_links", "traverse_transcendence_path",
                "traverse_immanence_path"
            ]
        }
        
        try:
            # Statistiques globales
            if hasattr(self.memory_engine, 'get_memory_statistics'):
                data["statistics"] = self.memory_engine.get_memory_statistics()
            
            # Donn√©es par strate
            for strata in ["somatic", "cognitive", "metaphysical"]:
                if target_strata and strata != target_strata:
                    continue
                    
                try:
                    if hasattr(self.memory_engine, 'find_by_strata'):
                        memories = self.memory_engine.find_by_strata(strata)
                        data["strata_data"][strata] = {
                            "count": len(memories),
                            "memories": memories[:10]  # Limite pour √©viter les prompts trop longs
                        }
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur collecte strate {strata}: {e}")
                    data["strata_data"][strata] = {"error": str(e)}
            
            # Informations sur le backend
            data["backend_info"] = {
                "type": getattr(self.memory_engine, 'backend_type', 'unknown'),
                "available": MEMORY_ENGINE_AVAILABLE
            }
            
        except Exception as e:
            print(f"‚ùå Erreur collecte donn√©es MemoryEngine: {e}")
            data["error"] = str(e)
        
        return data
    
    async def _generate_contextual_prompt(self, memory_data: Dict, target_strata: str = None) -> str:
        """G√©n√®re un prompt contextuel avec les donn√©es MemoryEngine."""
        
        # Remplacement des variables dans le prompt
        prompt = self.exploration_prompt
        
        # Injection des donn√©es contextuelles
        context_injection = f"""
<üúÑcontexte_m√©moire>
  <üúÇdonn√©es_statistiques>
    {json.dumps(memory_data.get("statistics", {}), indent=2)}
  </üúÇdonn√©es_statistiques>
  
  <üúÅdonn√©es_strates>
    {json.dumps(memory_data.get("strata_data", {}), indent=2)}
  </üúÅdonn√©es_strates>
  
  <üúÄinformations_backend>
    {json.dumps(memory_data.get("backend_info", {}), indent=2)}
  </üúÄinformations_backend>
  
  <üúÉstrate_cibl√©e>
    {target_strata or "toutes"}
  </üúÉstrate_cibl√©e>
</üúÑcontexte_m√©moire>
        """
        
        # Remplacement dans le prompt
        prompt = prompt.replace("<üúÑcontexte_mystique>", context_injection + "\n<üúÑcontexte_mystique>")
        
        return prompt
    
    async def _parse_ai_response(self, ai_response: str, memory_data: Dict) -> Dict[str, Any]:
        """Parse la r√©ponse IA en structure structur√©e."""
        
        try:
            # Tentative de parsing JSON si la r√©ponse est structur√©e
            if "{" in ai_response and "}" in ai_response:
                # Extraction du JSON de la r√©ponse
                start = ai_response.find("{")
                end = ai_response.rfind("}") + 1
                json_str = ai_response[start:end]
                
                try:
                    parsed = json.loads(json_str)
                    return {
                        "success": True,
                        "ai_response": ai_response,
                        "parsed_data": parsed,
                        "memory_data": memory_data
                    }
                except json.JSONDecodeError:
                    pass
            
            # Fallback : retour de la r√©ponse brute
            return {
                "success": True,
                "ai_response": ai_response,
                "parsed_data": {"raw_response": ai_response},
                "memory_data": memory_data
            }
            
        except Exception as e:
            print(f"‚ùå Erreur parsing r√©ponse IA: {e}")
            return {
                "success": False,
                "error": str(e),
                "ai_response": ai_response,
                "memory_data": memory_data
            }
    
    async def get_navigation_history(self) -> List[Dict]:
        """Retourne l'historique de navigation."""
        return self.navigation_history
    
    async def clear_history(self):
        """Efface l'historique de navigation."""
        self.navigation_history = []


# Test du navigateur MemoryEngine
async def test_memory_engine_navigator():
    """Test du navigateur MemoryEngine."""
    print("üß† Test du navigateur MemoryEngine...")
    
    if not MEMORY_ENGINE_AVAILABLE:
        print("‚ùå MemoryEngine non disponible")
        return
    
    try:
        # Cr√©ation d'un MemoryEngine de test
        memory_engine = MemoryEngine(backend_type="filesystem")
        
        # Cr√©ation d'un moteur IA simul√© pour le test
        from ..ai_engines.ai_engine_factory import AIEngine
        
        class MockAIEngine(AIEngine):
            async def query(self, prompt: str, **kwargs) -> str:
                return '{"success": true, "test": "mock_response"}'
            
            async def is_available(self) -> bool:
                return True
        
        ai_engine = MockAIEngine()
        
        # Test du navigateur
        navigator = MemoryEngineNavigator(memory_engine, ai_engine)
        
        # Test d'exploration
        result = await navigator.explore_memory_strata()
        print(f"‚úÖ R√©sultat exploration: {result.get('success', False)}")
        
    except Exception as e:
        print(f"‚ùå Erreur test navigateur: {e}")


if __name__ == "__main__":
    asyncio.run(test_memory_engine_navigator()) 