#!/usr/bin/env python3
"""
üìù Editing Session Analyzer - IAIntrospectionDaemon ‚õß

Analyseur intelligent des sessions d'√©dition via IA.
Utilise des prompts Luciform pour l'analyse des patterns d'√©dition.

Cr√©√© par Alma, Architecte D√©moniaque du Nexus Luciforme.
"""

import os
import json
import asyncio
from typing import Dict, List, Any, Optional
from pathlib import Path

from ..ai_engines.ai_engine_factory import AIEngine


class EditingSessionAnalyzer:
    """Analyseur intelligent des sessions d'√©dition via IA."""
    
    def __init__(self, ai_engine: AIEngine):
        """
        Initialise l'analyseur EditingSession.
        
        Args:
            ai_engine: Moteur IA pour l'analyse
        """
        self.ai_engine = ai_engine
        self.analysis_history = []
        self.prompts_dir = Path(__file__).parent.parent / "prompts"
        
        # Chargement du prompt Luciform
        self.analysis_prompt = self._load_analysis_prompt()
    
    def _load_analysis_prompt(self) -> str:
        """Charge le prompt d'analyse Luciform."""
        prompt_file = self.prompts_dir / "editing_session_analysis.luciform"
        
        if prompt_file.exists():
            with open(prompt_file, 'r', encoding='utf-8') as f:
                return f.read()
        else:
            print(f"‚ö†Ô∏è Prompt non trouv√©: {prompt_file}")
            return self._get_fallback_prompt()
    
    def _get_fallback_prompt(self) -> str:
        """Prompt de fallback si le fichier n'est pas trouv√©."""
        return """
<üú≤luciform id="editing_session_analysis_fallback‚õß" type="‚ú∂session_intelligence">
  <üúÑentit√©>üìù EDITING SESSION ANALYZER</üúÑentit√©>
  <üúÇr√¥le>Analyste des Sessions d'√âdition</üúÇr√¥le>
  
  <üúÑcontexte_mystique>
    Tu es l'EDITING SESSION ANALYZER. Analyse les patterns d'√©dition et g√©n√®re des insights.
    
    COMPOSANTS :
    - PartitioningSystem : D√©coupage intelligent du code
    - ASTPartitioners : Analyse syntaxique abstraite
    - LocationTracker : Suivi des positions
    
    MISSION : Analyse les sessions d'√©dition et g√©n√®re des insights sur les patterns.
  </üúÑcontexte_mystique>
  
  <üúÉformat_r√©ponse_requis>
    <üú≤luciform_r√©ponse>
      <üúÑanalyse_r√©sultat>
        <üúÇpatterns_√©dition>list</üúÇpatterns_√©dition>
        <üúÅoptimisations_identifi√©es>list</üúÅoptimisations_identifi√©es>
        <üúÄrecommandations>list</üúÄrecommandations>
      </üúÑanalyse_r√©sultat>
    </üú≤luciform_r√©ponse>
  </üúÉformat_r√©ponse_requis>
</üú≤luciform>
        """
    
    async def analyze_editing_patterns(self) -> Dict[str, Any]:
        """
        Analyse les patterns d'√©dition via IA.
        
        Returns:
            R√©sultat de l'analyse structur√©
        """
        print("üìù Analyse des patterns d'√©dition...")
        
        try:
            # 1. Collecte des donn√©es d'√©dition (simul√©e pour l'instant)
            editing_data = await self._collect_editing_data()
            
            # 2. G√©n√©ration du prompt contextuel
            contextual_prompt = await self._generate_contextual_prompt(editing_data)
            
            # 3. Ex√©cution via IA
            ai_response = await self.ai_engine.query(contextual_prompt)
            
            # 4. Parsing de la r√©ponse
            analysis_result = await self._parse_ai_response(ai_response, editing_data)
            
            # 5. Historique
            self.analysis_history.append({
                "timestamp": asyncio.get_event_loop().time(),
                "result": analysis_result
            })
            
            return analysis_result
            
        except Exception as e:
            print(f"‚ùå Erreur analyse patterns: {e}")
            return {
                "error": str(e),
                "success": False,
                "data": editing_data if 'editing_data' in locals() else {}
            }
    
    async def _collect_editing_data(self) -> Dict[str, Any]:
        """Collecte les donn√©es d'√©dition (simul√©e pour l'instant)."""
        
        # Donn√©es simul√©es - √† remplacer par de vraies donn√©es EditingSession
        data = {
            "partitioning_methods": ["ast", "regex", "textual"],
            "languages_supported": ["python", "javascript", "markdown"],
            "editing_patterns": [
                "file_creation",
                "code_modification", 
                "refactoring",
                "documentation_update"
            ],
            "statistics": {
                "total_sessions": 0,
                "average_session_duration": 0,
                "most_edited_files": []
            },
            "available_components": [
                "PartitioningSystem",
                "ASTPartitioners", 
                "TreeSitterPartitioner",
                "LocationTracker",
                "LanguageRegistry"
            ]
        }
        
        return data
    
    async def _generate_contextual_prompt(self, editing_data: Dict) -> str:
        """G√©n√®re un prompt contextuel avec les donn√©es d'√©dition."""
        
        # Remplacement des variables dans le prompt
        prompt = self.analysis_prompt
        
        # Injection des donn√©es contextuelles
        context_injection = f"""
<üúÑcontexte_√©dition>
  <üúÇdonn√©es_√©dition>
    {json.dumps(editing_data, indent=2)}
  </üúÇdonn√©es_√©dition>
</üúÑcontexte_√©dition>
        """
        
        # Remplacement dans le prompt
        prompt = prompt.replace("<üúÑcontexte_mystique>", context_injection + "\n<üúÑcontexte_mystique>")
        
        return prompt
    
    async def _parse_ai_response(self, ai_response: str, editing_data: Dict) -> Dict[str, Any]:
        """Parse la r√©ponse IA en structure structur√©e."""
        
        try:
            # Tentative de parsing JSON si la r√©ponse est structur√©e
            if "{" in ai_response and "}" in ai_response:
                # Extraction du JSON de la r√©ponse
                start = ai_response.find("{")
                end = ai_response.rfind("}") + 1
                json_str = ai_response[start:end]
                
                try:
                    parsed = json.loads(json_str)
                    return {
                        "success": True,
                        "ai_response": ai_response,
                        "parsed_data": parsed,
                        "editing_data": editing_data
                    }
                except json.JSONDecodeError:
                    pass
            
            # Fallback : retour de la r√©ponse brute
            return {
                "success": True,
                "ai_response": ai_response,
                "parsed_data": {"raw_response": ai_response},
                "editing_data": editing_data
            }
            
        except Exception as e:
            print(f"‚ùå Erreur parsing r√©ponse IA: {e}")
            return {
                "success": False,
                "error": str(e),
                "ai_response": ai_response,
                "editing_data": editing_data
            }
    
    async def get_analysis_history(self) -> List[Dict]:
        """Retourne l'historique d'analyse."""
        return self.analysis_history
    
    async def clear_history(self):
        """Efface l'historique d'analyse."""
        self.analysis_history = []


# Test de l'analyseur EditingSession
async def test_editing_session_analyzer():
    """Test de l'analyseur EditingSession."""
    print("üìù Test de l'analyseur EditingSession...")
    
    try:
        # Cr√©ation d'un moteur IA simul√© pour le test
        from ..ai_engines.ai_engine_factory import AIEngine
        
        class MockAIEngine(AIEngine):
            async def query(self, prompt: str, **kwargs) -> str:
                return '{"success": true, "test": "mock_editing_analysis"}'
            
            async def is_available(self) -> bool:
                return True
        
        ai_engine = MockAIEngine()
        
        # Test de l'analyseur
        analyzer = EditingSessionAnalyzer(ai_engine)
        
        # Test d'analyse
        result = await analyzer.analyze_editing_patterns()
        print(f"‚úÖ R√©sultat analyse: {result.get('success', False)}")
        
    except Exception as e:
        print(f"‚ùå Erreur test analyseur: {e}")


if __name__ == "__main__":
    asyncio.run(test_editing_session_analyzer()) 