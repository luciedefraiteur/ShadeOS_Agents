#!/usr/bin/env python3
"""
üõ†Ô∏è Tool Registry Explorer - IAIntrospectionDaemon ‚õß

Explorateur intelligent du ToolMemoryExtension via IA.
Utilise des prompts Luciform pour l'analyse de l'√©cosyst√®me d'outils.

Cr√©√© par Alma, Architecte D√©moniaque du Nexus Luciforme.
"""

import os
import json
import asyncio
from typing import Dict, List, Any, Optional
from pathlib import Path

# Import du ToolMemoryExtension
try:
    import sys
    sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../../')))
    from Core.Archivist.MemoryEngine.tool_memory_extension import ToolMemoryExtension
    TOOL_EXTENSION_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è ToolMemoryExtension non disponible: {e}")
    TOOL_EXTENSION_AVAILABLE = False

from ..ai_engines.ai_engine_factory import AIEngine


class ToolRegistryExplorer:
    """Explorateur intelligent du ToolMemoryExtension via IA."""
    
    def __init__(self, tool_extension: ToolMemoryExtension, ai_engine: AIEngine):
        """
        Initialise l'explorateur ToolRegistry.
        
        Args:
            tool_extension: Instance du ToolMemoryExtension
            ai_engine: Moteur IA pour l'analyse
        """
        self.tool_extension = tool_extension
        self.ai_engine = ai_engine
        self.exploration_history = []
        self.prompts_dir = Path(__file__).parent.parent / "prompts"
        
        # Chargement du prompt Luciform
        self.analysis_prompt = self._load_analysis_prompt()
    
    def _load_analysis_prompt(self) -> str:
        """Charge le prompt d'analyse Luciform."""
        prompt_file = self.prompts_dir / "tool_registry_analysis.luciform"
        
        if prompt_file.exists():
            with open(prompt_file, 'r', encoding='utf-8') as f:
                return f.read()
        else:
            print(f"‚ö†Ô∏è Prompt non trouv√©: {prompt_file}")
            return self._get_fallback_prompt()
    
    def _get_fallback_prompt(self) -> str:
        """Prompt de fallback si le fichier n'est pas trouv√©."""
        return """
<üú≤luciform id="tool_registry_analysis_fallback‚õß" type="‚ú∂tool_intelligence">
  <üúÑentit√©>üõ†Ô∏è TOOL REGISTRY ANALYZER</üúÑentit√©>
  <üúÇr√¥le>Cartographe de l'√âcosyst√®me d'Outils</üúÇr√¥le>
  
  <üúÑcontexte_mystique>
    Tu es le TOOL REGISTRY ANALYZER. Analyse l'√©cosyst√®me d'outils et g√©n√®re des insights.
    
    M√âTHODES DISPONIBLES :
    - scan_luciform_directories()
    - index_all_tools()
    - find_tools_by_type()
    - find_tools_by_keyword()
    - search_tools()
    
    NIVEAUX : fondamental, interm√©diaire, avanc√©
  </üúÑcontexte_mystique>
  
  <üúÇmission>
    Analyse l'√©cosyst√®me d'outils et g√©n√®re une cartographie structur√©e.
  </üúÇmission>
  
  <üúÉformat_r√©ponse_requis>
    <üú≤luciform_r√©ponse>
      <üúÑanalyse_r√©sultat>
        <üúÇinventaire_global>
          <total_outils>int</total_outils>
          <types_disponibles>list</types_disponibles>
        </üúÇinventaire_global>
        <üúÅinsights_strat√©giques>
          <patterns_identifi√©s>list</patterns_identifi√©s>
          <recommandations>list</recommandations>
        </üúÅinsights_strat√©giques>
      </üúÑanalyse_r√©sultat>
    </üú≤luciform_r√©ponse>
  </üúÉformat_r√©ponse_requis>
</üú≤luciform>
        """
    
    async def analyze_tool_ecosystem(self) -> Dict[str, Any]:
        """
        Analyse l'√©cosyst√®me d'outils via IA.
        
        Returns:
            R√©sultat de l'analyse structur√©
        """
        print("üõ†Ô∏è Analyse de l'√©cosyst√®me d'outils...")
        
        try:
            # 1. Collecte des donn√©es ToolRegistry
            tool_data = await self._collect_tool_registry_data()
            
            # 2. G√©n√©ration du prompt contextuel
            contextual_prompt = await self._generate_contextual_prompt(tool_data)
            
            # 3. Ex√©cution via IA
            ai_response = await self.ai_engine.query(contextual_prompt)
            
            # 4. Parsing de la r√©ponse
            analysis_result = await self._parse_ai_response(ai_response, tool_data)
            
            # 5. Historique
            self.exploration_history.append({
                "timestamp": asyncio.get_event_loop().time(),
                "result": analysis_result
            })
            
            return analysis_result
            
        except Exception as e:
            print(f"‚ùå Erreur analyse √©cosyst√®me: {e}")
            return {
                "error": str(e),
                "success": False,
                "data": tool_data if 'tool_data' in locals() else {}
            }
    
    async def _collect_tool_registry_data(self) -> Dict[str, Any]:
        """Collecte les donn√©es du ToolRegistry."""
        
        data = {
            "tools": [],
            "statistics": {},
            "available_methods": [
                "scan_luciform_directories", "index_all_tools", "find_tools_by_type",
                "find_tools_by_keyword", "find_tools_by_level", "search_tools",
                "get_tool_info", "list_all_tool_types"
            ]
        }
        
        try:
            # Scan des outils
            if hasattr(self.tool_extension, 'scan_luciform_directories'):
                tools = self.tool_extension.scan_luciform_directories()
                data["tools"] = tools[:50]  # Limite pour √©viter les prompts trop longs
            
            # Indexation
            if hasattr(self.tool_extension, 'index_all_tools'):
                self.tool_extension.index_all_tools(force_reindex=False)
            
            # Statistiques par type
            if hasattr(self.tool_extension, 'list_all_tool_types'):
                tool_types = self.tool_extension.list_all_tool_types()
                data["statistics"]["types"] = tool_types
            
            # Statistiques par niveau
            for level in ["fondamental", "interm√©diaire", "avanc√©"]:
                try:
                    if hasattr(self.tool_extension, 'find_tools_by_level'):
                        level_tools = self.tool_extension.find_tools_by_level(level)
                        data["statistics"][f"niveau_{level}"] = len(level_tools)
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur collecte niveau {level}: {e}")
            
            # Informations g√©n√©rales
            data["statistics"]["total_tools"] = len(data["tools"])
            data["statistics"]["indexed"] = True
            
        except Exception as e:
            print(f"‚ùå Erreur collecte donn√©es ToolRegistry: {e}")
            data["error"] = str(e)
        
        return data
    
    async def _generate_contextual_prompt(self, tool_data: Dict) -> str:
        """G√©n√®re un prompt contextuel avec les donn√©es ToolRegistry."""
        
        # Remplacement des variables dans le prompt
        prompt = self.analysis_prompt
        
        # Injection des donn√©es contextuelles
        context_injection = f"""
<üúÑcontexte_outils>
  <üúÇdonn√©es_outils>
    {json.dumps(tool_data.get("tools", [])[:20], indent=2)}
  </üúÇdonn√©es_outils>
  
  <üúÅstatistiques>
    {json.dumps(tool_data.get("statistics", {}), indent=2)}
  </üúÅstatistiques>
  
  <üúÄm√©thodes_disponibles>
    {json.dumps(tool_data.get("available_methods", []), indent=2)}
  </üúÄm√©thodes_disponibles>
</üúÑcontexte_outils>
        """
        
        # Remplacement dans le prompt
        prompt = prompt.replace("<üúÑcontexte_mystique>", context_injection + "\n<üúÑcontexte_mystique>")
        
        return prompt
    
    async def _parse_ai_response(self, ai_response: str, tool_data: Dict) -> Dict[str, Any]:
        """Parse la r√©ponse IA en structure structur√©e."""
        
        try:
            # Tentative de parsing JSON si la r√©ponse est structur√©e
            if "{" in ai_response and "}" in ai_response:
                # Extraction du JSON de la r√©ponse
                start = ai_response.find("{")
                end = ai_response.rfind("}") + 1
                json_str = ai_response[start:end]
                
                try:
                    parsed = json.loads(json_str)
                    return {
                        "success": True,
                        "ai_response": ai_response,
                        "parsed_data": parsed,
                        "tool_data": tool_data
                    }
                except json.JSONDecodeError:
                    pass
            
            # Fallback : retour de la r√©ponse brute
            return {
                "success": True,
                "ai_response": ai_response,
                "parsed_data": {"raw_response": ai_response},
                "tool_data": tool_data
            }
            
        except Exception as e:
            print(f"‚ùå Erreur parsing r√©ponse IA: {e}")
            return {
                "success": False,
                "error": str(e),
                "ai_response": ai_response,
                "tool_data": tool_data
            }
    
    async def get_exploration_history(self) -> List[Dict]:
        """Retourne l'historique d'exploration."""
        return self.exploration_history
    
    async def clear_history(self):
        """Efface l'historique d'exploration."""
        self.exploration_history = []


# Test de l'explorateur ToolRegistry
async def test_tool_registry_explorer():
    """Test de l'explorateur ToolRegistry."""
    print("üõ†Ô∏è Test de l'explorateur ToolRegistry...")
    
    if not TOOL_EXTENSION_AVAILABLE:
        print("‚ùå ToolMemoryExtension non disponible")
        return
    
    try:
        # Cr√©ation d'un ToolMemoryExtension de test
        from Core.Archivist.MemoryEngine.engine import MemoryEngine
        memory_engine = MemoryEngine(backend_type="filesystem")
        tool_extension = ToolMemoryExtension(memory_engine)
        
        # Cr√©ation d'un moteur IA simul√© pour le test
        from ..ai_engines.ai_engine_factory import AIEngine
        
        class MockAIEngine(AIEngine):
            async def query(self, prompt: str, **kwargs) -> str:
                return '{"success": true, "test": "mock_tool_analysis"}'
            
            async def is_available(self) -> bool:
                return True
        
        ai_engine = MockAIEngine()
        
        # Test de l'explorateur
        explorer = ToolRegistryExplorer(tool_extension, ai_engine)
        
        # Test d'analyse
        result = await explorer.analyze_tool_ecosystem()
        print(f"‚úÖ R√©sultat analyse: {result.get('success', False)}")
        
    except Exception as e:
        print(f"‚ùå Erreur test explorateur: {e}")


if __name__ == "__main__":
    asyncio.run(test_tool_registry_explorer()) 