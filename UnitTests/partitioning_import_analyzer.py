#!/usr/bin/env python3
"""
Analyseur d'imports utilisant le partitioner pour une analyse pr√©cise
des d√©pendances des auto-feeding threads.
"""

import os
import sys
import argparse
import json
import time
from datetime import datetime
from pathlib import Path
from typing import Set, List, Dict, Optional, Tuple
from collections import defaultdict, deque

# Ajouter le r√©pertoire racine pour les imports Core
sys.path.append('.')

try:
    from Core.Partitioner.ast_partitioners.python_ast_partitioner import PythonASTPartitioner
    from Core.Partitioner.partition_schemas import PartitioningError
    print("‚úÖ Partitioner import√© avec succ√®s!")
except ImportError as e:
    print(f"‚ùå Erreur import partitioner: {e}")
    sys.exit(1)

try:
    from Core.LoggingProviders.base_logging_provider import BaseLoggingProvider
    from Core.LoggingProviders.console_logging_provider import ConsoleLoggingProvider
    from Core.LoggingProviders.file_logging_provider import FileLoggingProvider
    print("‚úÖ Providers de logging import√©s avec succ√®s!")
except ImportError as e:
    print(f"‚ùå Erreur import providers: {e}")
    sys.exit(1)

# Importer l'ImportResolver existant
try:
    from Core.Partitioner.import_resolver import ImportResolver
    print("‚úÖ ImportResolver import√© avec succ√®s!")
except ImportError as e:
    print(f"‚ö†Ô∏è Erreur import ImportResolver: {e}")
    ImportResolver = None


class SimpleImportAnalyzerLogger:
    """Logger simple et direct pour l'analyse d'imports, sans d√©pendances complexes."""
    
    def __init__(self, log_directory: Optional[str] = None, log_format: str = "json", project_root: str = "."):
        self.log_directory = log_directory
        self.log_format = log_format
        self.project_root = project_root
        self.session_id = f"analysis_{int(time.time())}"
        self.start_time = time.time()
        self.analysis_data = {
            'files_analyzed': [],
            'imports_found': {},
            'cycles_detected': [],
            'stats': {}
        }
        
        # Pr√©-construction du rapport markdown en m√©moire
        self.md_sections = []
        self.files_data = {}  # Dictionnaire pour √©viter les doublons: {file_path: {depth, imports}}
        self.cycles_detected = []
        
        # Cr√©er le r√©pertoire de logs si n√©cessaire
        if log_directory:
            Path(log_directory).mkdir(parents=True, exist_ok=True)
            # Cr√©er le sous-r√©pertoire imports_analysis
            imports_analysis_dir = Path(log_directory) / "imports_analysis"
            imports_analysis_dir.mkdir(parents=True, exist_ok=True)
            
            # Fichier de log JSON
            self.log_file = imports_analysis_dir / "imports_analysis.log"
            
            # Fichier de rapport Markdown
            self.md_file = imports_analysis_dir / "imports_analysis_report.md"
        else:
            self.log_file = None
            self.md_file = None
    
    def _init_md_report(self):
        """Initialise le rapport Markdown avec l'en-t√™te."""
        if self.md_file:
            header = f"""# üìä Rapport d'Analyse d'Imports

**Session ID:** `{self.session_id}`  
**Date:** {datetime.fromtimestamp(self.start_time).strftime('%Y-%m-%d %H:%M:%S')}  
**Format:** Analyse des d√©pendances Python avec d√©tection de cycles intelligente

---

## üéØ R√©sum√© Ex√©cutif

*Ce rapport d√©taille l'analyse des imports Python dans le projet, incluant les d√©pendances locales, les cycles d√©tect√©s et les statistiques d'analyse.*

---

## üìÅ Liste Simple des Fichiers Parcourus

*Liste compl√®te de tous les fichiers analys√©s (style "ls r√©cursif") :*

"""
            self.md_sections.append(header)
    
    def _write_md_section(self, content: str):
        """Ajoute une section au rapport markdown en m√©moire."""
        self.md_sections.append(content)
    
    def _write_log(self, level: str, message: str, data: Dict = None):
        """√âcrit un log dans le fichier."""
        if not self.log_file:
            return
            
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = {
            "timestamp": timestamp,
            "level": level,
            "session_id": self.session_id,
            "message": message
        }
        
        if data:
            log_entry.update(data)
        
        try:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                if self.log_format == "json":
                    f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
                else:
                    f.write(f"[{timestamp}] {level}: {message}\n")
        except Exception as e:
            print(f"‚ùå Erreur √©criture log: {e}")
    
    def log_analysis_start(self, start_files: List[str]):
        """Log le d√©but d'une analyse."""
        self._write_log("INFO", "üöÄ D√©but analyse", {
            "type": "analysis_start",
            "start_files": start_files,
            "total_start_files": len(start_files)
        })
        print(f"üöÄ D√©but analyse session {self.session_id}")
        print(f"üìÅ Fichiers de d√©part: {len(start_files)}")
    
    def log_file_analysis_start(self, file_path: str, depth: int = 0):
        """Log le d√©but de l'analyse d'un fichier."""
        self._write_log("INFO", f"üìÅ Analyse: {file_path}", {
            "type": "file_analysis_start",
            "file_path": file_path,
            "depth": depth
        })
        indent = '  ' * depth
        print(f"{indent}üìÅ Analyse: {file_path}")
    
    def log_import_resolution(self, import_name: str, current_file: str, resolved_path: Optional[str], resolution_time: float):
        """Log la r√©solution d'un import."""
        self._write_log("INFO", f"Import r√©solu: {import_name}", {
            "type": "import_resolution",
            "import_name": import_name,
            "current_file": current_file,
            "resolved_path": resolved_path,
            "resolution_time": resolution_time,
            "success": resolved_path is not None
        })
        
        if resolved_path:
            print(f"  ‚úÖ {import_name} -> {resolved_path}")
        else:
            print(f"  ‚ùå {import_name} -> Non r√©solu")
    
    def log_imports_summary(self, file_path: str, local_imports: List[str], standard_imports: List[str], third_party_imports: List[str]):
        """Log un r√©sum√© des imports d'un fichier."""
        self._write_log("INFO", f"R√©sum√© imports: {file_path}", {
            "type": "imports_summary",
            "file_path": file_path,
            "local_imports": local_imports,
            "standard_imports": standard_imports,
            "third_party_imports": third_party_imports,
            "total_imports": len(local_imports) + len(standard_imports) + len(third_party_imports)
        })
        print(f"üìä R√©sum√© {file_path}: {len(local_imports)} locaux, {len(standard_imports)} standard, {len(third_party_imports)} tiers")
    
    def log_file_analysis_complete(self, file_path: str, resolved_count: int, total_imports: int):
        """Log la fin de l'analyse d'un fichier."""
        self._write_log("INFO", f"Analyse termin√©e: {file_path}", {
            "type": "file_analysis_complete",
            "file_path": file_path,
            "resolved_count": resolved_count,
            "total_imports": total_imports,
            "resolution_rate": resolved_count / total_imports if total_imports > 0 else 0.0
        })
        print(f"  üì¶ {file_path}: {resolved_count}/{total_imports} r√©solus")
    
    def log_recursive_analysis_complete(self, all_dependencies: Set[str], unused_files: Set[str]):
        """Log la fin de l'analyse r√©cursive."""
        total_time = time.time() - self.start_time
        self._write_log("INFO", "üéØ Analyse r√©cursive termin√©e", {
            "type": "recursive_analysis_complete",
            "all_dependencies": list(all_dependencies),
            "unused_files": list(unused_files),
            "total_dependencies": len(all_dependencies),
            "total_unused": len(unused_files),
            "total_time": total_time
        })
        print(f"üéØ Analyse termin√©e: {len(all_dependencies)} d√©pendances, {len(unused_files)} non utilis√©s")
        print(f"‚è±Ô∏è Temps total: {total_time:.2f}s")
    
    def log_error(self, message: str, error: Exception = None):
        """Log une erreur."""
        error_data = {"type": "error", "message": message}
        if error:
            error_data["error_type"] = type(error).__name__
            error_data["error_details"] = str(error)
        
        self._write_log("ERROR", message, error_data)
        print(f"‚ùå ERREUR: {message}")
        if error:
            print(f"   D√©tails: {error}")
    
    def log_warning(self, message: str, **kwargs):
        """Log un avertissement."""
        self._write_log("WARNING", message, {"type": "warning"})
        print(f"‚ö†Ô∏è {message}")
        if 'cycle' in kwargs:
            self.cycles_detected.append(kwargs['cycle'])
    
    def log_info(self, message: str, **kwargs):
        """Log un message d'information."""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        log_entry = {
            'timestamp': timestamp,
            'level': 'INFO',
            'message': message,
            'session_id': self.session_id,
            **kwargs
        }
        
        if self.log_file:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
        
        # Ajouter au rapport Markdown si c'est un message d'analyse
        if 'file' in kwargs:
            self._add_file_to_md_report(kwargs['file'], kwargs.get('imports', []), kwargs.get('depth', 0))
        elif 'cycle' in kwargs:
            self.cycles_detected.append(kwargs['cycle'])
    
    def _add_file_to_md_report(self, file_path: str, imports: List[str], depth: int):
        """Ajoute un fichier analys√© au rapport Markdown (en m√©moire)."""
        # Convertir le chemin absolu en chemin relatif
        try:
            relative_path = os.path.relpath(file_path, self.project_root)
        except ValueError:
            # Si le fichier n'est pas dans le projet, garder le chemin absolu
            relative_path = file_path
        
        # Stocker dans le dictionnaire pour √©viter les doublons
        if relative_path not in self.files_data:
            self.files_data[relative_path] = {
                'depth': depth,
                'imports': imports
            }
        else:
            # Si le fichier est d√©j√† pr√©sent, mettre √† jour la profondeur et les imports
            # Garder la profondeur la plus √©lev√©e (plus de d√©tails)
            if depth > self.files_data[relative_path]['depth']:
                self.files_data[relative_path]['depth'] = depth
            # Fusionner les imports (√©viter les doublons)
            existing_imports = set(self.files_data[relative_path]['imports'])
            new_imports = set(imports)
            self.files_data[relative_path]['imports'] = list(existing_imports | new_imports)
    
    def _add_cycle_to_md_report(self, cycle: List[str]):
        """Ajoute un cycle d√©tect√© au rapport Markdown (en m√©moire)."""
        self.cycles_detected.append(cycle)
    
    def log_debug(self, message: str, **kwargs):
        """Log un message de debug."""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        log_entry = {
            'timestamp': timestamp,
            'level': 'DEBUG',
            'message': message,
            'session_id': self.session_id,
            **kwargs
        }
        
        if self.log_file:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
    
    def log_structured(self, level: str, message: str, **kwargs):
        """Log un message structur√©."""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        log_entry = {
            'timestamp': timestamp,
            'level': level.upper(),
            'message': message,
            'session_id': self.session_id,
            **kwargs
        }
        
        if self.log_file:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
    
    def finalize_report(self, stats: Dict):
        """Finalise le rapport Markdown en √©crivant tout le contenu pr√©-construit."""
        if not self.md_file:
            return
        
        # Initialiser l'en-t√™te
        self._init_md_report()
        
        # G√©n√©rer la liste simple des fichiers parcourus
        files_list = []
        for file_path in sorted(self.files_data.keys()):
            files_list.append(f"`{file_path}`")
        
        # Ajouter la liste simple des fichiers
        files_section = "\n".join(files_list)
        self._write_md_section(files_section)
        
        # Section de l'arbre ASCII structurel
        tree_section = """

---

## üå≥ Arbre Structurel des Fichiers

*Repr√©sentation visuelle de la hi√©rarchie des fichiers analys√©s :*

"""
        self._write_md_section(tree_section)
        
        # G√©n√©rer l'arbre ASCII structurel relatif
        ascii_tree = self._generate_ascii_tree()
        self._write_md_section(ascii_tree)
        
        # Section des imports
        imports_section = """

---

## üìã Liste Simple des Imports (Style "ls r√©cursif")

*Liste simplifi√©e de tous les imports locaux trouv√©s, organis√©s par fichier :*

"""
        self._write_md_section(imports_section)
        
        # G√©n√©rer la liste simple des imports √† partir du dictionnaire
        simple_entries = []
        for file_path, file_data in sorted(self.files_data.items()):
            simple_entry = f"**{file_path}** (profondeur {file_data['depth']}):"
            if file_data['imports']:
                for imp in sorted(file_data['imports']):
                    simple_entry += f"\n  - `{imp}`"
            else:
                simple_entry += "\n  - *Aucun import local*"
            simple_entries.append(simple_entry)
        
        # Ajouter la liste simple des imports
        simple_section = "\n\n".join(simple_entries)
        self._write_md_section(simple_section)
        
        # Section d√©taill√©e
        detailed_section = """

---

## üìÅ Analyse D√©taill√©e par Fichier

"""
        self._write_md_section(detailed_section)
        
        # Ajouter chaque fichier avec ses d√©tails
        for file_path, file_data in sorted(self.files_data.items()):
            indent = "  " * file_data['depth']
            section = f"""
### {indent}üìÑ {Path(file_path).name}

**Chemin:** `{file_path}`  
**Profondeur:** {file_data['depth']}

**Imports trouv√©s ({len(file_data['imports'])}):**
"""
            
            if file_data['imports']:
                for imp in sorted(file_data['imports']):
                    section += f"- `{imp}`\n"
            else:
                section += "- *Aucun import local trouv√©*\n"
            
            self._write_md_section(section)
        
        # Section des cycles
        if self.cycles_detected:
            cycles_section = """

---

## ‚ö†Ô∏è Cycles D√©tect√©s

"""
            for i, cycle in enumerate(self.cycles_detected, 1):
                cycles_section += f"""
### Cycle {i}

**Fichiers impliqu√©s:**
"""
                for j, file_path in enumerate(cycle, 1):
                    file_name = Path(file_path).name
                    cycles_section += f"{j}. `{file_path}` ({file_name})\n"
            
            self._write_md_section(cycles_section)
        
        # Statistiques finales
        end_time = time.time()
        duration = end_time - self.start_time
        
        summary = f"""
---

## üìà Statistiques d'Analyse

**Dur√©e totale:** {duration:.2f} secondes  
**Fichiers analys√©s:** {stats.get('files_analyzed', 0)}  
**Imports locaux trouv√©s:** {stats.get('local_imports', 0)}  
**Cycles d√©tect√©s:** {stats.get('cycles_detected', 0)}  
**Profondeur maximale:** {stats.get('max_depth', 0)}

### üîç D√©tails par Type d'Import

"""
        
        import_types = stats.get('import_types', {})
        for import_type, count in import_types.items():
            summary += f"- **{import_type}:** {count}\n"
        
        summary += f"""
---

## üéØ Recommandations

"""
        
        if stats.get('cycles_detected', 0) > 0:
            summary += """
### ‚ö†Ô∏è Cycles D√©tect√©s
Des cycles de d√©pendances ont √©t√© d√©tect√©s. Consid√©rez:
- Refactoriser les imports circulaires
- Utiliser des imports conditionnels
- S√©parer les responsabilit√©s des modules
"""
        else:
            summary += """
### ‚úÖ Aucun Cycle D√©tect√©
La structure des imports est saine, aucune action requise.
"""
        
        summary += f"""
---

*Rapport g√©n√©r√© automatiquement le {datetime.now().strftime('%Y-%m-%d √† %H:%M:%S')}*
"""
        
        self._write_md_section(summary)
        
        # √âcrire tout le rapport d'un coup
        with open(self.md_file, 'w', encoding='utf-8') as f:
            f.write("\n".join(self.md_sections))

    def _generate_ascii_tree(self) -> str:
        """G√©n√®re un arbre ASCII structurel relatif des fichiers analys√©s."""
        from collections import defaultdict
        
        # Cr√©er une structure d'arbre hi√©rarchique
        tree = defaultdict(lambda: defaultdict(set))
        
        for file_path in self.files_data.keys():
            # Le file_path est d√©j√† un chemin relatif maintenant
            rel_path = file_path
            
            # S√©parer le chemin en parties
            parts = rel_path.split(os.sep)
            
            if len(parts) == 1:
                # Fichier √† la racine
                tree['.']['files'].add(parts[0])
            elif len(parts) == 2:
                # Fichier dans un sous-dossier direct
                tree[parts[0]]['files'].add(parts[1])
            else:
                # Fichier dans un sous-dossier profond
                current_level = tree[parts[0]]
                for i in range(1, len(parts) - 1):
                    if parts[i] not in current_level:
                        current_level[parts[i]] = defaultdict(set)
                    current_level = current_level[parts[i]]
                current_level['files'].add(parts[-1])
        
        # G√©n√©rer l'arbre ASCII
        tree_lines = []
        tree_lines.append("```")
        
        def add_directory(dir_name, content, prefix="", is_last=True):
            if dir_name == '.':
                tree_lines.append(".")
            else:
                tree_lines.append(f"{prefix}üìÅ {dir_name}/")
            
            # Ajouter les sous-dossiers
            subdirs = [(k, v) for k, v in content.items() if k != 'files']
            for i, (subdir_name, subdir_content) in enumerate(sorted(subdirs)):
                is_subdir_last = (i == len(subdirs) - 1) and not content.get('files')
                sub_prefix = "‚îî‚îÄ‚îÄ " if is_subdir_last else "‚îú‚îÄ‚îÄ "
                new_prefix = prefix + ("    " if is_subdir_last else "‚îÇ   ")
                add_directory(subdir_name, subdir_content, new_prefix, is_subdir_last)
            
            # Ajouter les fichiers
            files = sorted(content.get('files', []))
            for i, file_name in enumerate(files):
                is_file_last = (i == len(files) - 1)
                file_prefix = "‚îî‚îÄ‚îÄ " if is_file_last else "‚îú‚îÄ‚îÄ "
                tree_lines.append(f"{prefix}{file_prefix}üìÑ {file_name}")
        
        # Traiter les dossiers principaux
        main_dirs = sorted(tree.keys())
        for i, dir_name in enumerate(main_dirs):
            is_last = (i == len(main_dirs) - 1)
            add_directory(dir_name, tree[dir_name], "", is_last)
        
        tree_lines.append("```")
        return "\n".join(tree_lines)


class DependencyGraph:
    """Graphe de d√©pendances avec d√©tection de cycles intelligente."""
    
    def __init__(self):
        self.dependencies = defaultdict(set)
        self.visited = set()
        self.recursion_stack = set()
    
    def add_dependency(self, file_path: str, dependency: str):
        """Ajoute une d√©pendance si elle ne cr√©e pas de cycle."""
        if not self._would_create_cycle(file_path, dependency):
            self.dependencies[file_path].add(dependency)
    
    def detect_cycles(self) -> List[List[str]]:
        """D√©tecte tous les cycles dans le graphe."""
        self.visited.clear()
        self.recursion_stack.clear()
        cycles = []
        
        for node in self.dependencies:
            if node not in self.visited:
                self._dfs_cycle_detection(node, [], cycles)
        
        return cycles
    
    def _dfs_cycle_detection(self, node: str, path: List[str], cycles: List[List[str]]):
        """DFS pour d√©tecter les cycles."""
        if node in self.recursion_stack:
            # Cycle d√©tect√©
            cycle_start = path.index(node)
            cycle = path[cycle_start:] + [node]
            cycles.append(cycle)
            return
        
        if node in self.visited:
            return
        
        self.visited.add(node)
        self.recursion_stack.add(node)
        path.append(node)
        
        for neighbor in self.dependencies[node]:
            self._dfs_cycle_detection(neighbor, path, cycles)
        
        path.pop()
        self.recursion_stack.remove(node)
    
    def get_cycle_free_dependencies(self, file_path: str) -> Set[str]:
        """Retourne les d√©pendances qui ne cr√©ent pas de cycles."""
        safe_deps = set()
        for dep in self.dependencies[file_path]:
            if not self._would_create_cycle(file_path, dep):
                safe_deps.add(dep)
        return safe_deps
    
    def _would_create_cycle(self, from_file: str, to_file: str) -> bool:
        """V√©rifie si ajouter une d√©pendance cr√©erait un cycle."""
        if from_file == to_file:
            return True
        
        # BFS pour v√©rifier s'il existe un chemin de to_file vers from_file
        queue = deque([to_file])
        visited = {to_file}
        
        while queue:
            current = queue.popleft()
            
            for neighbor in self.dependencies[current]:
                if neighbor == from_file:
                    return True  # Cycle d√©tect√©
                
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)
        
        return False
    
    def get_dependency_stats(self) -> Dict[str, any]:
        """Retourne des statistiques sur le graphe de d√©pendances."""
        total_files = len(self.dependencies)
        total_deps = sum(len(deps) for deps in self.dependencies.values())
        
        # Top 5 fichiers avec le plus de d√©pendances
        file_dep_counts = [(file, len(deps)) for file, deps in self.dependencies.items()]
        file_dep_counts.sort(key=lambda x: x[1], reverse=True)
        top_files = file_dep_counts[:5]
        
        return {
            'total_files': total_files,
            'total_dependencies': total_deps,
            'top_files': top_files
        }

class PartitioningImportAnalyzer:
    """Analyseur d'imports utilisant le partitioner pour une analyse pr√©cise des d√©pendances."""
    
    def __init__(self, project_root: str = '.', logging_provider: BaseLoggingProvider = None):
        self.project_root = os.path.abspath(project_root)
        self.logging_provider = logging_provider
        self.logger = SimpleImportAnalyzerLogger(project_root=self.project_root)
        
        # Cache pour les modules locaux d√©tect√©s
        self._local_modules_cache = {}
        
        # Initialiser les structures de donn√©es
        self.visited = set()
        self.file_depths = {}
        self.all_dependencies = set()
        self.dependency_graph = DependencyGraph()
        
        # Initialiser le partitioner
        try:
            from Core.Partitioner.ast_partitioners.python_ast_partitioner import PythonASTPartitioner
            self.partitioner = PythonASTPartitioner()
            print("‚úÖ Partitioner import√© avec succ√®s!")
        except ImportError as e:
            print(f"‚ö†Ô∏è Erreur import partitioner: {e}")
            self.partitioner = None
        
        # ImportResolver (optionnel)
        self.import_resolver = None
    
    def _get_import_resolver(self, current_file: str = None):
        """Retourne l'ImportResolver, en le cr√©ant si n√©cessaire."""
        if self.import_resolver is None:
            try:
                from Core.Partitioner.import_resolver import ImportResolver
                # Ne pas passer current_file au constructeur car il ne l'accepte pas
                self.import_resolver = ImportResolver(project_root=self.project_root)
            except ImportError as e:
                self.logger.log_error(f"Impossible d'importer ImportResolver: {e}")
                return None
        return self.import_resolver
    
    def _safe_log(self, method_name: str, *args, **kwargs):
        """Appelle une m√©thode de logging de mani√®re s√©curis√©e."""
        if hasattr(self.logger, method_name):
            try:
                method = getattr(self.logger, method_name)
                method(*args, **kwargs)
            except Exception as e:
                # Fallback vers les m√©thodes de base
                self.logger.log_error(f"Erreur dans {method_name}: {e}")
        else:
            # Fallback vers les m√©thodes de base seulement si la m√©thode sp√©cialis√©e n'existe pas
            if method_name == 'log_file_analysis_start':
                self.logger.log_info(f"üìÅ Analyse: {args[0] if args else 'Unknown'}")
            elif method_name == 'log_import_resolution':
                import_name, file_path, resolved_path = args[:3]
                if resolved_path:
                    self.logger.log_info(f"  ‚úÖ {import_name} -> {resolved_path}")
                else:
                    self.logger.log_warning(f"  ‚ùå {import_name} -> Non r√©solu")
            elif method_name == 'log_imports_summary':
                file_path = args[0]
                local_imports, standard_imports, third_party_imports = args[1:4]
                self.logger.log_info(f"üìä R√©sum√© {file_path}: {len(local_imports)} locaux, {len(standard_imports)} standard, {len(third_party_imports)} tiers")
            elif method_name == 'log_file_analysis_complete':
                file_path, resolved_count, total_imports = args[:3]
                self.logger.log_info(f"  üì¶ {file_path}: {resolved_count}/{total_imports} r√©solus")
            elif method_name == 'log_analysis_start':
                start_files = args[0] if args else []
                self.logger.log_info(f"üöÄ D√©but analyse avec {len(start_files)} fichiers")
            elif method_name == 'log_recursive_analysis_complete':
                all_dependencies, unused_files = args[:2]
                self.logger.log_info(f"üéØ Analyse termin√©e: {len(all_dependencies)} d√©pendances, {len(unused_files)} non utilis√©s")
    
    def extract_imports_with_partitioner(self, file_path: str, use_import_resolver: bool = True) -> List[str]:
        """Extrait les imports d'un fichier en utilisant le partitioner ou la m√©thode simple."""
        try:
            # Si le partitioner n'est pas disponible, utiliser la m√©thode simple
            if self.partitioner is None:
                return self._extract_imports_simple(file_path)
            
            # Si use_import_resolver est False, utiliser la m√©thode simple
            if not use_import_resolver:
                return self._extract_imports_simple(file_path)
            
            # Utiliser le partitioner si disponible
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Utiliser le partitioner pour extraire les imports
            result = self.partitioner.parse_content(content)
            if result and hasattr(result, 'imports'):
                imports = []
                for imp in result.imports:
                    if hasattr(imp, 'name'):
                        imports.append(imp.name)
                    elif isinstance(imp, str):
                        imports.append(imp)
                return imports
            else:
                # Fallback vers la m√©thode simple si le partitioner √©choue
                return self._extract_imports_simple(file_path)
                
        except Exception as e:
            self.logger.log_error(f'Erreur partitioner {file_path}: {e}')
            # Fallback vers la m√©thode simple en cas d'erreur
            return self._extract_imports_simple(file_path)
    
    def _extract_imports_simple(self, file_path: str) -> List[str]:
        """Extrait les imports d'un fichier Python avec une m√©thode simple (sans ImportResolver)."""
        try:
            import ast
            
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            imports = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        imports.append(alias.name)
                elif isinstance(node, ast.ImportFrom):
                    module = node.module or ''
                    level = node.level
                    
                    for alias in node.names:
                        if level > 0:
                            # Import relatif
                            dots = '.' * level
                            if module:
                                imports.append(f"{dots}{module}.{alias.name}")
                            else:
                                imports.append(f"{dots}{alias.name}")
                        else:
                            # Import absolu
                            if module:
                                imports.append(f"{module}.{alias.name}")
                            else:
                                imports.append(alias.name)
            
            return imports
            
        except Exception as e:
            self.logger.log_error(f'Erreur extraction simple {file_path}: {e}')
            return []
    
    def find_file_for_import(self, import_name: str, current_file: str, use_import_resolver: bool = True) -> Optional[str]:
        """Trouve le fichier correspondant √† un import en utilisant l'ImportResolver existant."""
        try:
            # V√©rifier si c'est un import de biblioth√®que standard
            if self._is_standard_library_import(import_name):
                return None  # Ne pas r√©soudre les imports standard
            
            # V√©rifier si c'est un import local (simple et rapide)
            if not self._is_local_import(import_name):
                return None  # Ne pas r√©soudre les imports non locaux
            
            # Utiliser l'ImportResolver existant si disponible et activ√©
            if use_import_resolver and ImportResolver is not None:
                # Cr√©er une instance d'ImportResolver si pas encore fait
                if not hasattr(self, '_import_resolver_instance'):
                    self._import_resolver_instance = ImportResolver(project_root=self.project_root)
                
                # Utiliser la m√©thode resolve_import de l'ImportResolver
                resolved_path = self._import_resolver_instance.resolve_import(import_name, current_file)
                if resolved_path and os.path.exists(resolved_path):
                    return resolved_path
            
            # Fallback vers la logique simple si ImportResolver non disponible ou d√©sactiv√©
            return self._resolve_import_simple(import_name, current_file)
            
        except Exception as e:
            self.logger.log_error(f'Erreur r√©solution import {import_name}: {e}')
            return None
    
    def _is_local_import(self, import_name: str) -> bool:
        """V√©rifie si un import est local au projet en d√©tectant automatiquement les modules."""
        # Imports relatifs (commencent par .)
        if import_name.startswith('.'):
            return True
        
        # D√©tection automatique des modules locaux
        return self._is_local_module(import_name)
    
    def _is_local_module(self, import_name: str) -> bool:
        """D√©tecte automatiquement si un module est local au projet."""
        # V√©rifier le cache d'abord
        if import_name in self._local_modules_cache:
            return self._local_modules_cache[import_name]
        
        try:
            # Extraire le premier niveau du module (ex: "Core" de "Core.LLMProviders")
            first_level = import_name.split('.')[0]
            
            # V√©rifier si ce premier niveau existe comme dossier dans le projet
            module_path = os.path.join(self.project_root, first_level)
            
            is_local = False
            
            # Si c'est un dossier, c'est probablement un module local
            if os.path.isdir(module_path):
                # V√©rifier qu'il contient des fichiers Python ou un __init__.py
                if (os.path.exists(os.path.join(module_path, '__init__.py')) or
                    any(f.endswith('.py') for f in os.listdir(module_path) if os.path.isfile(os.path.join(module_path, f)))):
                    is_local = True
            
            # V√©rifier aussi si c'est un fichier Python direct
            module_file = os.path.join(self.project_root, first_level + '.py')
            if os.path.exists(module_file):
                is_local = True
            
            # Mettre en cache le r√©sultat
            self._local_modules_cache[import_name] = is_local
            return is_local
                
        except (IndexError, OSError):
            # En cas d'erreur, consid√©rer comme non local et mettre en cache
            self._local_modules_cache[import_name] = False
            return False
    
    def _resolve_import_simple(self, import_name: str, current_file: str) -> Optional[str]:
        """R√©sout un import de mani√®re simple sans ImportResolver."""
        try:
            if import_name.startswith('.'):
                # Import relatif
                current_dir = os.path.dirname(os.path.abspath(current_file))
                
                # Compter les .. au d√©but (chaque .. = remonter d'un niveau)
                dots_count = len(import_name) - len(import_name.lstrip('.'))
                # Remonter du bon nombre de niveaux (diviser par 2 car .. = 2 caract√®res)
                for _ in range(dots_count // 2):
                    current_dir = os.path.dirname(current_dir)
                
                # Convertir le reste en chemin
                rest = import_name[dots_count:].replace('.', '/')
                
                # Essayer d'abord le fichier .py direct
                if rest.endswith('.py'):
                    candidate = os.path.normpath(os.path.join(current_dir, rest))
                else:
                    candidate = os.path.normpath(os.path.join(current_dir, rest + '.py'))
                
                if os.path.exists(candidate):
                    return candidate
                
                # Si pas trouv√©, essayer avec __init__.py
                candidate = os.path.normpath(os.path.join(current_dir, rest, '__init__.py'))
                if os.path.exists(candidate):
                    return candidate
                
                # Si c'est un import de classe (ex: ..backends.storage_backends.FileSystemBackend)
                # Essayer de trouver le module contenant la classe
                parts = rest.split('/')
                if len(parts) > 1:
                    # Prendre tout sauf la derni√®re partie comme module
                    module_path = '/'.join(parts[:-1])
                    module_file = os.path.normpath(os.path.join(current_dir, module_path + '.py'))
                    if os.path.exists(module_file):
                        return module_file
                    
                    # Essayer avec __init__.py
                    module_init = os.path.normpath(os.path.join(current_dir, module_path, '__init__.py'))
                    if os.path.exists(module_init):
                        return module_init
                
                return None
            else:
                # Import absolu - essayer de trouver dans le projet
                project_root = self.project_root
                
                # Essayer avec .py
                candidate = os.path.join(project_root, import_name.replace('.', '/') + '.py')
                if os.path.exists(candidate):
                    return candidate
                
                # Essayer avec __init__.py
                candidate = os.path.join(project_root, import_name.replace('.', '/'), '__init__.py')
                if os.path.exists(candidate):
                    return candidate
                
                # Si c'est un import de classe (ex: MemoryEngine.core.engine.MemoryEngine)
                # Essayer de trouver le module contenant la classe
                parts = import_name.split('.')
                if len(parts) > 1:
                    # Prendre tout sauf la derni√®re partie comme module
                    module_path = '/'.join(parts[:-1])
                    module_file = os.path.join(project_root, module_path + '.py')
                    if os.path.exists(module_file):
                        return module_file
                    
                    # Essayer avec __init__.py
                    module_init = os.path.join(project_root, module_path, '__init__.py')
                    if os.path.exists(module_init):
                        return module_init
                
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur r√©solution import {import_name}: {e}")
            return None
    
    def _resolve_import_with_resolver(self, import_name: str, current_file: str) -> Optional[str]:
        """R√©solution avec l'ImportResolver en mode s√©curis√©."""
        try:
            import importlib.util
            import sys
            
            # Sauvegarder l'√©tat actuel de sys.path
            old_sys_path = list(sys.path)
            
            try:
                # Ajouter le project_root temporairement
                project_root_str = str(self.project_root)
                if project_root_str not in sys.path:
                    sys.path.insert(0, project_root_str)
                
                # Ajouter le dossier parent du fichier courant
                current_dir = os.path.dirname(os.path.abspath(current_file))
                if current_dir not in sys.path:
                    sys.path.insert(0, current_dir)
                
                # Pour les imports relatifs, construire le nom de module
                if import_name.startswith('.'):
                    # Compter les .. au d√©but
                    dots_count = len(import_name) - len(import_name.lstrip('.'))
                    # Remonter du bon nombre de niveaux
                    current_dir_path = os.path.dirname(os.path.abspath(current_file))
                    for _ in range(dots_count // 2):
                        current_dir_path = os.path.dirname(current_dir_path)
                    
                    # Convertir le reste en nom de module
                    rest = import_name[dots_count:].replace('.', '/')
                    module_name = rest.replace('/', '.')
                    
                    # Ajouter le dossier calcul√© √† sys.path
                    if current_dir_path not in sys.path:
                        sys.path.insert(0, current_dir_path)
                else:
                    # Import absolu
                    module_name = import_name
                
                # Utiliser importlib pour r√©soudre
                spec = importlib.util.find_spec(module_name)
                if spec and spec.origin:
                    # V√©rifier si c'est un fichier local
                    if spec.origin.startswith(str(self.project_root)):
                        return spec.origin
                
            finally:
                # Restaurer sys.path
                sys.path = old_sys_path
                
        except Exception as e:
            self.logger.log_error(f'Erreur r√©solution avec resolver {import_name}: {e}')
        
        return None
    
    def _is_standard_library_import(self, import_name: str) -> bool:
        """V√©rifie si un import fait partie de la biblioth√®que standard."""
        standard_modules = {
            'time', 'json', 'os', 'sys', 'pathlib', 'typing', 'dataclasses', 
            'collections', 'abc', 're', 'asyncio', 'enum', 'datetime', 'logging',
            'argparse', 'functools', 'itertools', 'contextlib', 'threading',
            'multiprocessing', 'subprocess', 'tempfile', 'shutil', 'glob',
            'fnmatch', 'pickle', 'copy', 'weakref', 'types', 'inspect',
            'traceback', 'warnings', 'unittest', 'doctest', 'pdb', 'profile',
            'cProfile', 'timeit', 'dis', 'pickletools', 'tabnanny', 'py_compile',
            'compileall', 'keyword', 'token', 'tokenize', 'ast', 'symtable',
            'code', 'codeop', 'zipimport', 'pkgutil', 'modulefinder', 'runpy',
            'importlib', 'importlib.util', 'importlib.machinery', 'importlib.abc'
        }
        
        # Extraire le module principal
        module_name = import_name.split('.')[0]
        return module_name in standard_modules
    
    def analyze_file_recursively(self, file_path: str, depth: int = 0, 
                               local_only: bool = False, verbose: bool = False, debug: bool = False,
                               use_import_resolver: bool = True):
        """Analyse r√©cursivement un fichier et ses d√©pendances avec d√©tection de cycles intelligente."""
        if file_path in self.visited:
            if verbose:
                self.logger.log_info(f'üìÅ D√©j√† visit√©: {file_path} (profondeur {depth})')
            return
        
        self.visited.add(file_path)
        self.all_dependencies.add(file_path)
        self.file_depths[file_path] = depth # Stocker la profondeur
        
        # Log du d√©but d'analyse du fichier
        self._safe_log('log_file_analysis_start', file_path, depth)
        
        imports = self.extract_imports_with_partitioner(file_path, use_import_resolver)
        indent = '  ' * depth
        
        if not local_only or verbose:
            print(f'{indent}üìÅ {file_path}')
            print(f'{indent}   Imports (partitioner): {imports}')
        
        resolved_count = 0
        local_imports = []
        standard_imports = []
        third_party_imports = []
        
        for import_name in imports:
            # √âviter les imports de biblioth√®que standard en mode local_only
            if local_only and self._is_standard_library_import(import_name):
                continue
                
            start_time = time.time()
            local_file = self.find_file_for_import(import_name, file_path, use_import_resolver)
            resolution_time = time.time() - start_time
            
            # Log de la r√©solution d'import
            self._safe_log('log_import_resolution', import_name, file_path, local_file, resolution_time)
            
            if local_file and os.path.exists(local_file):
                # Ajouter au graphe de d√©pendances
                self.dependency_graph.add_dependency(file_path, local_file)
                
                # V√©rifier si cette d√©pendance cr√©erait un cycle
                if not self.dependency_graph._would_create_cycle(file_path, local_file):
                    resolved_count += 1
                    local_imports.append((import_name, local_file))
                    if not local_only or verbose:
                        print(f'{indent}   ‚úÖ {import_name} -> {local_file}')
                    # R√©cursion seulement si pas de cycle
                    if local_file not in self.visited:
                        self.analyze_file_recursively(local_file, depth + 1, local_only, verbose, debug, use_import_resolver)
                else:
                    if verbose:
                        print(f'{indent}   üîÑ Cycle √©vit√©: {import_name} -> {local_file}')
            else:
                if not local_only or verbose:
                    print(f'{indent}   ‚ùå {import_name} -> Non r√©solu')
        
        # Log du r√©sum√© des imports
        self._safe_log('log_imports_summary', file_path, 
                      [imp[0] for imp in local_imports], standard_imports, third_party_imports)
        
        if local_only and local_imports:
            print(f'{indent}üìÅ {file_path}')
            print(f'{indent}   Imports locaux:')
            for import_name, local_file in local_imports:
                print(f'{indent}   ‚úÖ {import_name} -> {local_file}')
        
        # Log de la fin d'analyse du fichier
        self._safe_log('log_file_analysis_complete', file_path, resolved_count, len(imports))
        
        if resolved_count > 0 and (not local_only or verbose):
            print(f'{indent}   üì¶ R√©solus: {resolved_count}')
    
    def analyze_autofeeding_dependencies(self, local_only: bool = False, verbose: bool = False, debug: bool = False):
        """Analyse les d√©pendances des auto-feeding threads."""
        autofeeding_files = [
            'Assistants/Generalist/V9_AutoFeedingThreadAgent.py',
            'Daemons/DaemonTeam/LegionAutoFeedingThread.py',
            'Daemons/DaemonTeam/LegionAutoFeedingThread_v2.py',
            'Core/UniversalAutoFeedingThread/base_auto_feeding_thread.py',
            'Core/UniversalAutoFeedingThread/universal_auto_feeding_thread.py'
        ]
        
        # Filtrer seulement les fichiers qui existent
        existing_files = [f for f in autofeeding_files if os.path.exists(f)]
        if not existing_files:
            self.logger.log_warning("Aucun fichier d'auto-feeding thread trouv√©")
            print("‚ö†Ô∏è Aucun fichier d'auto-feeding thread trouv√©")
            return set(), set()
        
        # Log du d√©but d'analyse
        self._safe_log('log_analysis_start', existing_files)
        
        if local_only:
            print('üéØ Analyse R√âCURSIVE - IMPORTS LOCAUX SEULEMENT...')
        else:
            print('üîç Analyse R√âCURSIVE avec PARTITIONER...')
        print('üîÑ D√©tection de cycles intelligente activ√©e')
        print('=' * 80)
        
        for file_path in existing_files:
            if not local_only:
                print(f'\nüìÅ D√âPART: {file_path}')
                print('-' * 60)
            
            # Log du d√©but d'analyse du fichier
            self.logger.log_info(f"üìÅ Analyse de {file_path}", file=file_path, depth=0)
            
            # Analyser les imports du fichier
            imports = self.extract_imports_with_partitioner(file_path)
            
            # Log des imports trouv√©s
            if imports:
                self.logger.log_info(f"‚úÖ Imports trouv√©s dans {file_path}", 
                                   file=file_path, 
                                   imports=imports,
                                   depth=0)
            else:
                self.logger.log_info(f"üìÑ Aucun import local trouv√© dans {file_path}", 
                                   file=file_path, 
                                   imports=[],
                                   depth=0)
            
            # Analyser r√©cursivement
            self.analyze_file_recursively(file_path, local_only=local_only, verbose=verbose, debug=debug)
        
        # Analyser les cycles d√©tect√©s
        cycles = self.dependency_graph.detect_cycles()
        if cycles:
            print(f'\nüîÑ CYCLES D√âTECT√âS: {len(cycles)}')
            for i, cycle in enumerate(cycles, 1):
                print(f'  Cycle {i}: {" -> ".join(cycle)}')
        else:
            print(f'\n‚úÖ AUCUN CYCLE D√âTECT√â')
        
        # Statistiques du graphe
        stats = self.dependency_graph.get_dependency_stats()
        print(f'\nüìä STATISTIQUES DU GRAPHE:')
        print(f'  Fichiers analys√©s: {stats["total_files"]}')
        print(f'  D√©pendances totales: {stats["total_dependencies"]}')
        print(f'  Cycles d√©tect√©s: {len(cycles)}') # Use len(cycles) from dependency_graph
        
        if stats['top_files']:
            print(f'\nüìà TOP 5 FICHIERS AVEC LE PLUS DE D√âPENDANCES:')
            for file, count in stats['top_files'][:5]:
                print(f'  {file}: {count} d√©pendances')
        
        if not local_only:
            print(f'\nüìä TOTAL D√âPENDANCES: {len(self.all_dependencies)}')
            print('\nüìã Liste compl√®te des d√©pendances:')
            for dep in sorted(self.all_dependencies):
                print(f'  {dep}')
            
            # Trouver tous les fichiers Python du projet
            all_py_files = set()
            for root, dirs, files in os.walk(self.project_root):
                dirs[:] = [d for d in dirs if d not in ['.git', '__pycache__', '.pytest_cache']]
                for file in files:
                    if file.endswith('.py'):
                        all_py_files.add(str(Path(root) / file))
            
            unused_files = all_py_files - self.all_dependencies
            print(f'\nüóëÔ∏è FICHIERS NON UTILIS√âS: {len(unused_files)}')
            print('\nüìã Premiers fichiers non utilis√©s:')
            for file_path in sorted(unused_files)[:20]:
                print(f'  {file_path}')
        else:
            print(f'\nüìä TOTAL FICHIERS AVEC IMPORTS LOCAUX: {len(self.all_dependencies)}')
        
        # Log de la fin d'analyse
        unused_files = set() if local_only else unused_files
        self._safe_log('log_recursive_analysis_complete', self.all_dependencies, unused_files)
        
        # Finaliser le rapport Markdown
        final_stats = {
            'files_analyzed': stats['total_files'],
            'local_imports': len(self.all_dependencies),
            'cycles_detected': len(cycles),
            'max_depth': max(self.file_depths.values()), # Utiliser la profondeur maximale
            'duration': 0,  # Pas de dur√©e calcul√©e dans cette m√©thode
            'import_types': {}  # Pas de types d'imports calcul√©s dans cette m√©thode
        }
        self.logger.finalize_report(final_stats)
        
        return self.all_dependencies, unused_files if not local_only else set()

    def analyze_imports(self, files_to_analyze: List[str], use_import_resolver: bool = True, max_depth: Optional[int] = None) -> Dict:
        """Analyse les imports des fichiers donn√©s avec d√©tection de cycles intelligente et analyse r√©cursive pure."""
        self.logger.log_info("üöÄ D√©but de l'analyse d'imports r√©cursive pure", 
                           files_count=len(files_to_analyze),
                           files=files_to_analyze,
                           use_import_resolver=use_import_resolver,
                           max_depth=max_depth)
        
        start_time = time.time()
        local_dependencies = set()  # Seulement les imports locaux
        all_dependencies = set()    # Tous les imports pour les stats
        import_types = defaultdict(int)
        
        # R√©initialiser l'√©tat pour une nouvelle analyse
        self.visited.clear()
        self.dependency_graph = DependencyGraph()
        self.file_depths.clear() # R√©initialiser les profondeurs
        
        # Analyser chaque fichier de mani√®re r√©cursive pure
        for file_path in files_to_analyze:
            if file_path in self.visited:
                continue
                
            self.logger.log_info(f"üìÅ Analyse de {file_path}", file=file_path, depth=0)
            
            # Analyser r√©cursivement avec logique pure (une seule passe)
            self._analyze_file_recursively_pure(file_path, 0, use_import_resolver, max_depth, 
                                              local_dependencies, all_dependencies, import_types)
        
        # D√©tecter les cycles
        cycles = self.dependency_graph.detect_cycles()
        for cycle in cycles:
            self.logger.log_warning(f"‚ö†Ô∏è Cycle d√©tect√©: {' -> '.join(cycle)}", cycle=cycle)
        
        end_time = time.time()
        duration = end_time - start_time
        
        # Statistiques finales
        stats = {
            'files_analyzed': len(self.visited),
            'local_imports': len(local_dependencies),  # Seulement les imports locaux
            'total_imports': len(all_dependencies),    # Tous les imports
            'cycles_detected': len(cycles),
            'max_depth': max(self.file_depths.values()) if self.file_depths else 0,
            'duration': duration,
            'import_types': dict(import_types)
        }
        
        self.logger.log_info("üéØ Analyse termin√©e", 
                           stats=stats,
                           duration=duration)
        
        # Finaliser le rapport Markdown
        self.logger.finalize_report(stats)
        
        return {
            'dependencies': list(all_dependencies),
            'cycles': cycles,
            'stats': stats
        }
    
    def _analyze_file_recursively_pure(self, file_path: str, depth: int, use_import_resolver: bool, 
                                     max_depth: Optional[int], local_dependencies: set, 
                                     all_dependencies: set, import_types: defaultdict):
        """Analyse r√©cursive pure d'un fichier - tout se fait en une seule passe."""
        # V√©rifier la limite de profondeur AVANT de marquer comme visit√©
        if max_depth is not None and depth > max_depth:
            self.logger.log_info(f"üõë Limite de profondeur atteinte pour {file_path}", 
                               file=file_path, depth=depth, max_depth=max_depth)
            return
        
        # V√©rifier si d√©j√† visit√© (√©viter les cycles)
        if file_path in self.visited:
            self.logger.log_info(f"üîÑ D√©j√† visit√©: {file_path} (profondeur {depth})", 
                               file=file_path, depth=depth)
            return
        
        # Marquer comme visit√© et stocker la profondeur
        self.visited.add(file_path)
        self.file_depths[file_path] = depth
        
        # Extraire les imports du fichier
        imports = self.extract_imports_with_partitioner(file_path, use_import_resolver)
        
        # Filtrer et traiter les imports
        local_imports = []
        for imp in imports:
            # Ajouter √† tous les imports pour les stats
            all_dependencies.add(imp)
            
            if self._is_local_import(imp):
                local_imports.append(imp)
                local_dependencies.add(imp)
            else:
                # Compter les types d'imports pour les stats
                if imp.startswith('.'):
                    import_types['relative'] += 1
                elif self._is_standard_library_import(imp):
                    import_types['external'] += 1
                else:
                    import_types['external'] += 1
        
        # Ajouter au rapport Markdown (seulement les imports locaux)
        self.logger._add_file_to_md_report(file_path, local_imports, depth)
        
        # Log de l'analyse
        self.logger.log_info(f"üìÑ Fichier analys√©: {file_path}", 
                           file=file_path, depth=depth, 
                           local_imports=len(local_imports), 
                           total_imports=len(imports))
        
        # R√©cursion pour les imports locaux (seulement si pas √† la limite)
        if max_depth is None or depth < max_depth:
            for import_name in local_imports:
                local_file = self.find_file_for_import(import_name, file_path, use_import_resolver)
                

                
                if local_file and os.path.exists(local_file):
                    # Ajouter au graphe de d√©pendances
                    self.dependency_graph.add_dependency(file_path, local_file)
                    
                    # V√©rifier si cette d√©pendance cr√©erait un cycle
                    if not self.dependency_graph._would_create_cycle(file_path, local_file):
                        # R√©cursion pure
                        print(f"üîÑ R√©cursion vers: {local_file} (profondeur {depth + 1})")
                        self._analyze_file_recursively_pure(local_file, depth + 1, use_import_resolver, 
                                                          max_depth, local_dependencies, all_dependencies, import_types)
                    else:
                        self.logger.log_warning(f"üîÑ Cycle √©vit√©: {import_name} -> {local_file}", 
                                              cycle=[file_path, local_file])
                else:
                    # Debug: afficher plus d'informations sur les imports non r√©solus
                    if 'TemporalFractalMemoryEngine' in import_name:
                        print(f"üîç DEBUG: Import non r√©solu: {import_name} dans {file_path}")
                        print(f"   Tentative de r√©solution...")
                        # Test manuel de r√©solution
                        test_resolution = self._resolve_import_simple(import_name, file_path)
                        print(f"   R√©solution test: {test_resolution}")
                        if test_resolution:
                            print(f"   Fichier existe: {os.path.exists(test_resolution)}")
                    else:
                        self.logger.log_info(f"‚ùå Import non r√©solu: {import_name} dans {file_path}")
        else:
            self.logger.log_info(f"üõë R√©cursion arr√™t√©e √† la profondeur {depth} pour {file_path}")

    def get_detected_local_modules(self) -> Dict[str, bool]:
        """Retourne tous les modules locaux d√©tect√©s automatiquement (pour debug)."""
        return self._local_modules_cache.copy()
    
    def print_detected_modules(self):
        """Affiche les modules locaux d√©tect√©s (pour debug)."""
        print("üîç Modules locaux d√©tect√©s automatiquement:")
        for module, is_local in sorted(self._local_modules_cache.items()):
            status = "‚úÖ" if is_local else "‚ùå"
            print(f"  {status} {module}")
        print(f"Total: {len(self._local_modules_cache)} modules analys√©s")

def main():
    """Fonction principale du script d'analyse d'imports."""
    parser = argparse.ArgumentParser(description='Analyseur d\'imports Python avec d√©tection de cycles')
    parser.add_argument('--local-only', action='store_true', 
                       help='Analyser seulement les imports locaux')
    parser.add_argument('--verbose', action='store_true', 
                       help='Mode verbeux avec plus de d√©tails')
    parser.add_argument('--debug', action='store_true', 
                       help='Mode debug avec informations d√©taill√©es')
    parser.add_argument('--log-output', action='store_true', 
                       help='Activer la sortie de logs')
    parser.add_argument('--log-directory', type=str, default='logs', 
                       help='R√©pertoire pour les fichiers de log')
    parser.add_argument('--log-format', type=str, choices=['json', 'text'], default='json', 
                       help='Format des logs (json ou text)')
    parser.add_argument('--use-import-resolver', action='store_true', default=True,
                       help='Utiliser l\'ImportResolver pour une r√©solution plus intelligente (d√©faut: True)')
    parser.add_argument('--no-import-resolver', action='store_true',
                       help='D√©sactiver l\'ImportResolver et utiliser seulement la logique simple')
    parser.add_argument('--max-depth', type=int, default=None,
                       help='Limite de profondeur pour l\'analyse r√©cursive (optionnel)')
    parser.add_argument('--show-detected-modules', action='store_true',
                       help='Afficher les modules locaux d√©tect√©s automatiquement')
    
    args = parser.parse_args()
    
    # G√©rer les options mutuellement exclusives
    if args.no_import_resolver:
        args.use_import_resolver = False
    
    # D√©finir les variables
    log_directory = args.log_directory
    files_to_analyze = [
        'Assistants/Generalist/V9_AutoFeedingThreadAgent.py',
        'Daemons/DaemonTeam/LegionAutoFeedingThread.py',
        'Daemons/DaemonTeam/LegionAutoFeedingThread_v2.py',
        'Core/UniversalAutoFeedingThread/base_auto_feeding_thread.py',
        'Core/UniversalAutoFeedingThread/universal_auto_feeding_thread.py'
    ]
    
    # Configurer le logger simple
    if args.log_output:
        logger = SimpleImportAnalyzerLogger(
            log_directory=log_directory,
            log_format=args.log_format,
            project_root=os.getcwd()
        )
    else:
        logger = SimpleImportAnalyzerLogger(project_root=os.getcwd())
    
    # Cr√©er l'analyseur avec le logger simple
    analyzer = PartitioningImportAnalyzer(logging_provider=logger)
    analyzer.logger = logger
    
    print(f"üîß Configuration:")
    print(f"   - ImportResolver: {'‚úÖ Activ√©' if args.use_import_resolver else '‚ùå D√©sactiv√©'}")
    print(f"   - Mode local seulement: {'‚úÖ Oui' if args.local_only else '‚ùå Non'}")
    print(f"   - Logs: {'‚úÖ Activ√©s' if args.log_output else '‚ùå D√©sactiv√©s'}")
    print(f"   - Profondeur max: {'‚àû' if args.max_depth is None else args.max_depth}")
    print(f"   - Fichiers √† analyser: {len(files_to_analyze)}")
    print()
    
    # Analyser les imports avec logique r√©cursive pure
    result = analyzer.analyze_imports(files_to_analyze, 
                                    use_import_resolver=args.use_import_resolver,
                                    max_depth=args.max_depth)
    
    # Afficher les r√©sultats
    print(f"üìä R√©sultats de l'analyse des auto-feeding threads:")
    print(f"   Fichiers analys√©s: {result['stats']['files_analyzed']}")
    print(f"   Imports locaux trouv√©s: {result['stats']['local_imports']}")
    print(f"   Cycles d√©tect√©s: {result['stats']['cycles_detected']}")
    print(f"   Profondeur max atteinte: {result['stats']['max_depth']}")
    print(f"   Dur√©e: {result['stats']['duration']:.2f}s")
    print()
    
    if result['dependencies']:
        print(f"üì¶ D√©pendances trouv√©es:")
        for dep in sorted(result['dependencies']):
            print(f"   - {dep}")
        print()
    
    if result['cycles']:
        print(f"‚ö†Ô∏è Cycles d√©tect√©s:")
        for cycle in result['cycles']:
            print(f"   - {' -> '.join(cycle)}")
        print()
    else:
        print(f"‚úÖ Aucun cycle d√©tect√© - structure saine!")
        print()
    
    if args.log_output:
        print(f"üìù Rapport d√©taill√© g√©n√©r√© dans: {log_directory}/imports_analysis/")
        print(f"   - Log JSON: imports_analysis.log")
        print(f"   - Rapport Markdown: imports_analysis_report.md")
        print()
    
    # Afficher les modules d√©tect√©s si demand√©
    if args.show_detected_modules:
        analyzer.print_detected_modules()
        print()

if __name__ == '__main__':
    main() 