#!/usr/bin/env python3
"""
Analyseur d'imports utilisant le partitioner pour une analyse pr√©cise
des d√©pendances des auto-feeding threads.
"""

import os
import sys
import argparse
import json
import time
from datetime import datetime
from pathlib import Path
from typing import Set, List, Dict, Optional, Tuple
from collections import defaultdict, deque

# Ajouter le chemin pour importer le partitioner
sys.path.append('Assistants/EditingSession')

# Ajouter le r√©pertoire racine pour les imports Core
sys.path.append('.')

try:
    from partitioning.ast_partitioners import PythonASTPartitioner
    from partitioning.partition_schemas import PartitioningError
    print("‚úÖ Partitioner import√© avec succ√®s!")
except ImportError as e:
    print(f"‚ùå Erreur import partitioner: {e}")
    sys.exit(1)

try:
    from Core.LoggingProviders.base_logging_provider import BaseLoggingProvider
    from Core.LoggingProviders.console_logging_provider import ConsoleLoggingProvider
    from Core.LoggingProviders.file_logging_provider import FileLoggingProvider
    print("‚úÖ Providers de logging import√©s avec succ√®s!")
except ImportError as e:
    print(f"‚ùå Erreur import providers: {e}")
    sys.exit(1)


class SimpleImportAnalyzerLogger:
    """Logger simple et direct pour l'analyse d'imports, sans d√©pendances complexes."""
    
    def __init__(self, log_directory: Optional[str] = None, log_format: str = "json"):
        self.log_directory = log_directory
        self.log_format = log_format
        self.session_id = f"analysis_{int(time.time())}"
        self.start_time = time.time()
        self.analysis_data = {
            'files_analyzed': [],
            'imports_found': {},
            'cycles_detected': [],
            'stats': {}
        }
        
        # Cr√©er le r√©pertoire de logs si n√©cessaire
        if log_directory:
            Path(log_directory).mkdir(parents=True, exist_ok=True)
            # Cr√©er le sous-r√©pertoire imports_analysis
            imports_analysis_dir = Path(log_directory) / "imports_analysis"
            imports_analysis_dir.mkdir(parents=True, exist_ok=True)
            
            # Fichier de log JSON
            self.log_file = imports_analysis_dir / "imports_analysis.log"
            
            # Fichier de rapport Markdown
            self.md_file = imports_analysis_dir / "imports_analysis_report.md"
            
            # Initialiser le fichier Markdown
            self._init_md_report()
        else:
            self.log_file = None
            self.md_file = None
    
    def _init_md_report(self):
        """Initialise le rapport Markdown avec l'en-t√™te."""
        if self.md_file:
            with open(self.md_file, 'w', encoding='utf-8') as f:
                f.write(f"""# üìä Rapport d'Analyse d'Imports

**Session ID:** `{self.session_id}`  
**Date:** {datetime.fromtimestamp(self.start_time).strftime('%Y-%m-%d %H:%M:%S')}  
**Format:** Analyse des d√©pendances Python avec d√©tection de cycles intelligente

---

## üéØ R√©sum√© Ex√©cutif

*Ce rapport d√©taille l'analyse des imports Python dans le projet, incluant les d√©pendances locales, les cycles d√©tect√©s et les statistiques d'analyse.*

---

## üìÅ Fichiers Analys√©s

""")
    
    def _write_md_section(self, content: str):
        """√âcrit une section dans le fichier Markdown."""
        if self.md_file:
            with open(self.md_file, 'a', encoding='utf-8') as f:
                f.write(content + "\n")
    
    def _write_log(self, level: str, message: str, data: Dict = None):
        """√âcrit un log dans le fichier."""
        if not self.log_file:
            return
            
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = {
            "timestamp": timestamp,
            "level": level,
            "session_id": self.session_id,
            "message": message
        }
        
        if data:
            log_entry.update(data)
        
        try:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                if self.log_format == "json":
                    f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
                else:
                    f.write(f"[{timestamp}] {level}: {message}\n")
        except Exception as e:
            print(f"‚ùå Erreur √©criture log: {e}")
    
    def log_analysis_start(self, start_files: List[str]):
        """Log le d√©but d'une analyse."""
        self._write_log("INFO", "üöÄ D√©but analyse", {
            "type": "analysis_start",
            "start_files": start_files,
            "total_start_files": len(start_files)
        })
        print(f"üöÄ D√©but analyse session {self.session_id}")
        print(f"üìÅ Fichiers de d√©part: {len(start_files)}")
    
    def log_file_analysis_start(self, file_path: str, depth: int = 0):
        """Log le d√©but de l'analyse d'un fichier."""
        self._write_log("INFO", f"üìÅ Analyse: {file_path}", {
            "type": "file_analysis_start",
            "file_path": file_path,
            "depth": depth
        })
        indent = '  ' * depth
        print(f"{indent}üìÅ Analyse: {file_path}")
    
    def log_import_resolution(self, import_name: str, current_file: str, resolved_path: Optional[str], resolution_time: float):
        """Log la r√©solution d'un import."""
        self._write_log("INFO", f"Import r√©solu: {import_name}", {
            "type": "import_resolution",
            "import_name": import_name,
            "current_file": current_file,
            "resolved_path": resolved_path,
            "resolution_time": resolution_time,
            "success": resolved_path is not None
        })
        
        if resolved_path:
            print(f"  ‚úÖ {import_name} -> {resolved_path}")
        else:
            print(f"  ‚ùå {import_name} -> Non r√©solu")
    
    def log_imports_summary(self, file_path: str, local_imports: List[str], standard_imports: List[str], third_party_imports: List[str]):
        """Log un r√©sum√© des imports d'un fichier."""
        self._write_log("INFO", f"R√©sum√© imports: {file_path}", {
            "type": "imports_summary",
            "file_path": file_path,
            "local_imports": local_imports,
            "standard_imports": standard_imports,
            "third_party_imports": third_party_imports,
            "total_imports": len(local_imports) + len(standard_imports) + len(third_party_imports)
        })
        print(f"üìä R√©sum√© {file_path}: {len(local_imports)} locaux, {len(standard_imports)} standard, {len(third_party_imports)} tiers")
    
    def log_file_analysis_complete(self, file_path: str, resolved_count: int, total_imports: int):
        """Log la fin de l'analyse d'un fichier."""
        self._write_log("INFO", f"Analyse termin√©e: {file_path}", {
            "type": "file_analysis_complete",
            "file_path": file_path,
            "resolved_count": resolved_count,
            "total_imports": total_imports,
            "resolution_rate": resolved_count / total_imports if total_imports > 0 else 0.0
        })
        print(f"  üì¶ {file_path}: {resolved_count}/{total_imports} r√©solus")
    
    def log_recursive_analysis_complete(self, all_dependencies: Set[str], unused_files: Set[str]):
        """Log la fin de l'analyse r√©cursive."""
        total_time = time.time() - self.start_time
        self._write_log("INFO", "üéØ Analyse r√©cursive termin√©e", {
            "type": "recursive_analysis_complete",
            "all_dependencies": list(all_dependencies),
            "unused_files": list(unused_files),
            "total_dependencies": len(all_dependencies),
            "total_unused": len(unused_files),
            "total_time": total_time
        })
        print(f"üéØ Analyse termin√©e: {len(all_dependencies)} d√©pendances, {len(unused_files)} non utilis√©s")
        print(f"‚è±Ô∏è Temps total: {total_time:.2f}s")
    
    def log_error(self, message: str, error: Exception = None):
        """Log une erreur."""
        error_data = {"type": "error", "message": message}
        if error:
            error_data["error_type"] = type(error).__name__
            error_data["error_details"] = str(error)
        
        self._write_log("ERROR", message, error_data)
        print(f"‚ùå ERREUR: {message}")
        if error:
            print(f"   D√©tails: {error}")
    
    def log_warning(self, message: str, **kwargs):
        """Log un avertissement."""
        self._write_log("WARNING", message, {"type": "warning"})
        print(f"‚ö†Ô∏è {message}")
        if 'file' in kwargs:
            self._add_file_to_md_report(kwargs['file'], [], 0) # No imports for warning, depth 0
        elif 'cycle' in kwargs:
            self._add_cycle_to_md_report(kwargs['cycle'])
    
    def log_info(self, message: str, **kwargs):
        """Log un message d'information."""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        log_entry = {
            'timestamp': timestamp,
            'level': 'INFO',
            'message': message,
            'session_id': self.session_id,
            **kwargs
        }
        
        if self.log_file:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
        
        # Ajouter au rapport Markdown si c'est un message d'analyse
        if 'file' in kwargs:
            self._add_file_to_md_report(kwargs['file'], kwargs.get('imports', []), kwargs.get('depth', 0))
        elif 'cycle' in kwargs:
            self._add_cycle_to_md_report(kwargs['cycle'])
    
    def _add_file_to_md_report(self, file_path: str, imports: List[str], depth: int):
        """Ajoute un fichier analys√© au rapport Markdown."""
        indent = "  " * depth
        file_name = Path(file_path).name
        
        section = f"""
### {indent}üìÑ {file_name}

**Chemin:** `{file_path}`  
**Profondeur:** {depth}

**Imports trouv√©s ({len(imports)}):**
"""
        
        if imports:
            for imp in imports:
                section += f"- `{imp}`\n"
        else:
            section += "- *Aucun import local trouv√©*\n"
        
        self._write_md_section(section)
    
    def _add_cycle_to_md_report(self, cycle: List[str]):
        """Ajoute un cycle d√©tect√© au rapport Markdown."""
        section = f"""
### ‚ö†Ô∏è Cycle D√©tect√©

**Fichiers impliqu√©s:**
"""
        for i, file_path in enumerate(cycle, 1):
            file_name = Path(file_path).name
            section += f"{i}. `{file_path}` ({file_name})\n"
        
        self._write_md_section(section)
    
    def log_debug(self, message: str, **kwargs):
        """Log un message de debug."""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        log_entry = {
            'timestamp': timestamp,
            'level': 'DEBUG',
            'message': message,
            'session_id': self.session_id,
            **kwargs
        }
        
        if self.log_file:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
    
    def log_structured(self, level: str, message: str, **kwargs):
        """Log un message structur√©."""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        log_entry = {
            'timestamp': timestamp,
            'level': level.upper(),
            'message': message,
            'session_id': self.session_id,
            **kwargs
        }
        
        if self.log_file:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
    
    def finalize_report(self, stats: Dict):
        """Finalise le rapport Markdown avec les statistiques."""
        if not self.md_file:
            return
        
        end_time = time.time()
        duration = end_time - self.start_time
        
        summary = f"""
---

## üìà Statistiques d'Analyse

**Dur√©e totale:** {duration:.2f} secondes  
**Fichiers analys√©s:** {stats.get('files_analyzed', 0)}  
**Imports locaux trouv√©s:** {stats.get('local_imports', 0)}  
**Cycles d√©tect√©s:** {stats.get('cycles_detected', 0)}  
**Profondeur maximale:** {stats.get('max_depth', 0)}

### üîç D√©tails par Type d'Import

"""
        
        import_types = stats.get('import_types', {})
        for import_type, count in import_types.items():
            summary += f"- **{import_type}:** {count}\n"
        
        summary += f"""
---

## üéØ Recommandations

"""
        
        if stats.get('cycles_detected', 0) > 0:
            summary += """
### ‚ö†Ô∏è Cycles D√©tect√©s
Des cycles de d√©pendances ont √©t√© d√©tect√©s. Consid√©rez:
- Refactoriser les imports circulaires
- Utiliser des imports conditionnels
- S√©parer les responsabilit√©s des modules
"""
        else:
            summary += """
### ‚úÖ Aucun Cycle D√©tect√©
La structure des imports est saine, aucune action requise.
"""
        
        summary += f"""
---

*Rapport g√©n√©r√© automatiquement le {datetime.now().strftime('%Y-%m-%d √† %H:%M:%S')}*
"""
        
        self._write_md_section(summary)


class DependencyGraph:
    """Graphe de d√©pendances avec d√©tection de cycles intelligente."""
    
    def __init__(self):
        self.dependencies = defaultdict(set)
        self.visited = set()
        self.recursion_stack = set()
    
    def add_dependency(self, file_path: str, dependency: str):
        """Ajoute une d√©pendance si elle ne cr√©e pas de cycle."""
        if not self._would_create_cycle(file_path, dependency):
            self.dependencies[file_path].add(dependency)
    
    def detect_cycles(self) -> List[List[str]]:
        """D√©tecte tous les cycles dans le graphe."""
        self.visited.clear()
        self.recursion_stack.clear()
        cycles = []
        
        for node in self.dependencies:
            if node not in self.visited:
                self._dfs_cycle_detection(node, [], cycles)
        
        return cycles
    
    def _dfs_cycle_detection(self, node: str, path: List[str], cycles: List[List[str]]):
        """DFS pour d√©tecter les cycles."""
        if node in self.recursion_stack:
            # Cycle d√©tect√©
            cycle_start = path.index(node)
            cycle = path[cycle_start:] + [node]
            cycles.append(cycle)
            return
        
        if node in self.visited:
            return
        
        self.visited.add(node)
        self.recursion_stack.add(node)
        path.append(node)
        
        for neighbor in self.dependencies[node]:
            self._dfs_cycle_detection(neighbor, path, cycles)
        
        path.pop()
        self.recursion_stack.remove(node)
    
    def get_cycle_free_dependencies(self, file_path: str) -> Set[str]:
        """Retourne les d√©pendances qui ne cr√©ent pas de cycles."""
        safe_deps = set()
        for dep in self.dependencies[file_path]:
            if not self._would_create_cycle(file_path, dep):
                safe_deps.add(dep)
        return safe_deps
    
    def _would_create_cycle(self, from_file: str, to_file: str) -> bool:
        """V√©rifie si ajouter une d√©pendance cr√©erait un cycle."""
        if from_file == to_file:
            return True
        
        # BFS pour v√©rifier s'il existe un chemin de to_file vers from_file
        queue = deque([to_file])
        visited = {to_file}
        
        while queue:
            current = queue.popleft()
            
            for neighbor in self.dependencies[current]:
                if neighbor == from_file:
                    return True  # Cycle d√©tect√©
                
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)
        
        return False
    
    def get_dependency_stats(self) -> Dict[str, any]:
        """Retourne des statistiques sur le graphe de d√©pendances."""
        total_files = len(self.dependencies)
        total_deps = sum(len(deps) for deps in self.dependencies.values())
        
        # Top 5 fichiers avec le plus de d√©pendances
        file_dep_counts = [(file, len(deps)) for file, deps in self.dependencies.items()]
        file_dep_counts.sort(key=lambda x: x[1], reverse=True)
        top_files = file_dep_counts[:5]
        
        return {
            'total_files': total_files,
            'total_dependencies': total_deps,
            'top_files': top_files
        }

class PartitioningImportAnalyzer:
    """Analyseur d'imports utilisant le partitioner pour une analyse pr√©cise des d√©pendances."""
    
    def __init__(self, project_root: str = '.', logging_provider: BaseLoggingProvider = None):
        self.project_root = project_root
        self.partitioner = PythonASTPartitioner()
        self.import_resolver = None
        self.visited = set()
        self.all_dependencies = set()  # Ajout de l'attribut manquant
        self.dependency_graph = DependencyGraph()
        
        # Utiliser le logger simple par d√©faut
        if logging_provider is None:
            self.logger = SimpleImportAnalyzerLogger()
        else:
            # Si un provider est fourni, cr√©er un logger simple qui l'utilise
            self.logger = SimpleImportAnalyzerLogger()
            # TODO: Adapter pour utiliser le provider si n√©cessaire
    
    def _get_import_resolver(self):
        """Retourne l'ImportResolver, en le cr√©ant si n√©cessaire."""
        if self.import_resolver is None:
            try:
                from partitioning.import_resolver import ImportResolver
                self.import_resolver = ImportResolver(project_root=self.project_root)
            except ImportError as e:
                self.logger.log_error(f"Impossible d'importer ImportResolver: {e}")
                return None
        return self.import_resolver
    
    def _safe_log(self, method_name: str, *args, **kwargs):
        """Appelle une m√©thode de logging de mani√®re s√©curis√©e."""
        if hasattr(self.logger, method_name):
            try:
                method = getattr(self.logger, method_name)
                method(*args, **kwargs)
            except Exception as e:
                # Fallback vers les m√©thodes de base
                self.logger.log_error(f"Erreur dans {method_name}: {e}")
        else:
            # Fallback vers les m√©thodes de base seulement si la m√©thode sp√©cialis√©e n'existe pas
            if method_name == 'log_file_analysis_start':
                self.logger.log_info(f"üìÅ Analyse: {args[0] if args else 'Unknown'}")
            elif method_name == 'log_import_resolution':
                import_name, file_path, resolved_path = args[:3]
                if resolved_path:
                    self.logger.log_info(f"  ‚úÖ {import_name} -> {resolved_path}")
                else:
                    self.logger.log_warning(f"  ‚ùå {import_name} -> Non r√©solu")
            elif method_name == 'log_imports_summary':
                file_path = args[0]
                local_imports, standard_imports, third_party_imports = args[1:4]
                self.logger.log_info(f"üìä R√©sum√© {file_path}: {len(local_imports)} locaux, {len(standard_imports)} standard, {len(third_party_imports)} tiers")
            elif method_name == 'log_file_analysis_complete':
                file_path, resolved_count, total_imports = args[:3]
                self.logger.log_info(f"  üì¶ {file_path}: {resolved_count}/{total_imports} r√©solus")
            elif method_name == 'log_analysis_start':
                start_files = args[0] if args else []
                self.logger.log_info(f"üöÄ D√©but analyse avec {len(start_files)} fichiers")
            elif method_name == 'log_recursive_analysis_complete':
                all_dependencies, unused_files = args[:2]
                self.logger.log_info(f"üéØ Analyse termin√©e: {len(all_dependencies)} d√©pendances, {len(unused_files)} non utilis√©s")
    
    def extract_imports_with_partitioner(self, file_path: str) -> List[str]:
        """Extrait tous les imports d'un fichier Python avec le partitioner."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Parser avec le partitioner
            tree = self.partitioner.parse_content(content, file_path)
            
            # Analyser les imports
            import_analysis = self.partitioner.extract_import_analysis(tree)
            
            # Utiliser la nouvelle liste unifi√©e
            if 'all_imports' in import_analysis:
                return import_analysis['all_imports']
            
            # Fallback sur l'ancienne m√©thode si pas de all_imports
            all_imports = []
            
            # Imports de la biblioth√®que standard
            for import_info in import_analysis.get('standard_library', []):
                if isinstance(import_info, str):
                    all_imports.append(import_info)
                elif isinstance(import_info, dict):
                    module = import_info['module']
                    for name in import_info['names']:
                        all_imports.append(f"{module}.{name}")
            
            # Imports tiers
            for import_info in import_analysis.get('third_party', []):
                if isinstance(import_info, str):
                    all_imports.append(import_info)
                elif isinstance(import_info, dict):
                    module = import_info['module']
                    for name in import_info['names']:
                        all_imports.append(f"{module}.{name}")
            
            # Imports relatifs
            for import_info in import_analysis.get('relative_imports', []):
                module = import_info['module']
                level = import_info['level']
                for name in import_info['names']:
                    # Construire l'import relatif
                    dots = '.' * level
                    if module:
                        all_imports.append(f"{dots}{module}.{name}")
                    else:
                        all_imports.append(f"{dots}{name}")
            
            return all_imports
            
        except Exception as e:
            self.logger.log_error(f'Erreur partitioner {file_path}: {e}')
            return []
    
    def find_file_for_import(self, import_name: str, current_file: str) -> Optional[str]:
        """Trouve le fichier correspondant √† un import en utilisant l'ImportResolver."""
        try:
            resolver = self._get_import_resolver()
            if resolver is None:
                return None
                
            # V√©rifier si c'est un import de biblioth√®que standard
            if self._is_standard_library_import(import_name):
                return None  # Ne pas r√©soudre les imports standard
                
            return resolver.resolve_import(import_name, current_file)
        except Exception as e:
            self.logger.log_error(f'Erreur ImportResolver pour {import_name}: {e}')
            return None
    
    def _is_standard_library_import(self, import_name: str) -> bool:
        """V√©rifie si un import fait partie de la biblioth√®que standard."""
        standard_modules = {
            'time', 'json', 'os', 'sys', 'pathlib', 'typing', 'dataclasses', 
            'collections', 'abc', 're', 'asyncio', 'enum', 'datetime', 'logging',
            'argparse', 'functools', 'itertools', 'contextlib', 'threading',
            'multiprocessing', 'subprocess', 'tempfile', 'shutil', 'glob',
            'fnmatch', 'pickle', 'copy', 'weakref', 'types', 'inspect',
            'traceback', 'warnings', 'unittest', 'doctest', 'pdb', 'profile',
            'cProfile', 'timeit', 'dis', 'pickletools', 'tabnanny', 'py_compile',
            'compileall', 'keyword', 'token', 'tokenize', 'ast', 'symtable',
            'code', 'codeop', 'zipimport', 'pkgutil', 'modulefinder', 'runpy',
            'importlib', 'importlib.util', 'importlib.machinery', 'importlib.abc'
        }
        
        # Extraire le module principal
        module_name = import_name.split('.')[0]
        return module_name in standard_modules
    
    def analyze_file_recursively(self, file_path: str, depth: int = 0, 
                               local_only: bool = False, verbose: bool = False, debug: bool = False):
        """Analyse r√©cursivement un fichier et ses d√©pendances avec d√©tection de cycles intelligente."""
        if file_path in self.visited:
            if verbose:
                self.logger.log_info(f'üìÅ D√©j√† visit√©: {file_path} (profondeur {depth})')
            return
        
        self.visited.add(file_path)
        self.all_dependencies.add(file_path)
        
        # Log du d√©but d'analyse du fichier
        self._safe_log('log_file_analysis_start', file_path, depth)
        
        imports = self.extract_imports_with_partitioner(file_path)
        indent = '  ' * depth
        
        if not local_only or verbose:
            print(f'{indent}üìÅ {file_path}')
            print(f'{indent}   Imports (partitioner): {imports}')
        
        resolved_count = 0
        local_imports = []
        standard_imports = []
        third_party_imports = []
        
        for import_name in imports:
            # √âviter les imports de biblioth√®que standard en mode local_only
            if local_only and self._is_standard_library_import(import_name):
                continue
                
            start_time = time.time()
            local_file = self.find_file_for_import(import_name, file_path)
            resolution_time = time.time() - start_time
            
            # Log de la r√©solution d'import
            self._safe_log('log_import_resolution', import_name, file_path, local_file, resolution_time)
            
            if local_file and os.path.exists(local_file):
                # Ajouter au graphe de d√©pendances
                self.dependency_graph.add_dependency(file_path, local_file)
                
                # V√©rifier si cette d√©pendance cr√©erait un cycle
                if not self.dependency_graph._would_create_cycle(file_path, local_file):
                    resolved_count += 1
                    local_imports.append((import_name, local_file))
                    if not local_only or verbose:
                        print(f'{indent}   ‚úÖ {import_name} -> {local_file}')
                    # R√©cursion seulement si pas de cycle
                    if local_file not in self.visited:
                        self.analyze_file_recursively(local_file, depth + 1, local_only, verbose, debug)
                else:
                    if verbose:
                        print(f'{indent}   üîÑ Cycle √©vit√©: {import_name} -> {local_file}')
            else:
                if not local_only or verbose:
                    print(f'{indent}   ‚ùå {import_name} -> Non r√©solu')
        
        # Log du r√©sum√© des imports
        self._safe_log('log_imports_summary', file_path, 
                      [imp[0] for imp in local_imports], standard_imports, third_party_imports)
        
        if local_only and local_imports:
            print(f'{indent}üìÅ {file_path}')
            print(f'{indent}   Imports locaux:')
            for import_name, local_file in local_imports:
                print(f'{indent}   ‚úÖ {import_name} -> {local_file}')
        
        # Log de la fin d'analyse du fichier
        self._safe_log('log_file_analysis_complete', file_path, resolved_count, len(imports))
        
        if resolved_count > 0 and (not local_only or verbose):
            print(f'{indent}   üì¶ R√©solus: {resolved_count}')
    
    def analyze_autofeeding_dependencies(self, local_only: bool = False, verbose: bool = False, debug: bool = False):
        """Analyse les d√©pendances des auto-feeding threads."""
        autofeeding_files = [
            'Assistants/Generalist/V9_AutoFeedingThreadAgent.py',
            'Daemons/DaemonTeam/LegionAutoFeedingThread.py',
            'Daemons/DaemonTeam/LegionAutoFeedingThread_v2.py',
            'Core/UniversalAutoFeedingThread/base_auto_feeding_thread.py',
            'Core/UniversalAutoFeedingThread/universal_auto_feeding_thread.py'
        ]
        
        # Log du d√©but d'analyse
        self._safe_log('log_analysis_start', autofeeding_files)
        
        if local_only:
            print('üéØ Analyse R√âCURSIVE - IMPORTS LOCAUX SEULEMENT...')
        else:
            print('üîç Analyse R√âCURSIVE avec PARTITIONER...')
        print('üîÑ D√©tection de cycles intelligente activ√©e')
        print('=' * 80)
        
        for file_path in autofeeding_files:
            if os.path.exists(file_path):
                if not local_only:
                    print(f'\nüìÅ D√âPART: {file_path}')
                    print('-' * 60)
                self.analyze_file_recursively(file_path, local_only=local_only, verbose=verbose, debug=debug)
            else:
                self.logger.log_warning(f'Fichier non trouv√©: {file_path}')
                print(f'‚ö†Ô∏è Fichier non trouv√©: {file_path}')
        
        # Analyser les cycles d√©tect√©s
        cycles = self.dependency_graph.detect_cycles()
        if cycles:
            print(f'\nüîÑ CYCLES D√âTECT√âS: {len(cycles)}')
            for i, cycle in enumerate(cycles, 1):
                print(f'  Cycle {i}: {" -> ".join(cycle)}')
        else:
            print(f'\n‚úÖ AUCUN CYCLE D√âTECT√â')
        
        # Statistiques du graphe
        stats = self.dependency_graph.get_dependency_stats()
        print(f'\nüìä STATISTIQUES DU GRAPHE:')
        print(f'  Fichiers analys√©s: {stats["total_files"]}')
        print(f'  D√©pendances totales: {stats["total_dependencies"]}')
        print(f'  Cycles d√©tect√©s: {len(cycles)}') # Use len(cycles) from dependency_graph
        
        if stats['top_files']:
            print(f'\nüìà TOP 5 FICHIERS AVEC LE PLUS DE D√âPENDANCES:')
            for file, count in stats['top_files'][:5]:
                print(f'  {file}: {count} d√©pendances')
        
        if not local_only:
            print(f'\nüìä TOTAL D√âPENDANCES: {len(self.all_dependencies)}')
            print('\nüìã Liste compl√®te des d√©pendances:')
            for dep in sorted(self.all_dependencies):
                print(f'  {dep}')
            
            # Trouver tous les fichiers Python du projet
            all_py_files = set()
            for root, dirs, files in os.walk(self.project_root):
                dirs[:] = [d for d in dirs if d not in ['.git', '__pycache__', '.pytest_cache']]
                for file in files:
                    if file.endswith('.py'):
                        all_py_files.add(str(Path(root) / file))
            
            unused_files = all_py_files - self.all_dependencies
            print(f'\nüóëÔ∏è FICHIERS NON UTILIS√âS: {len(unused_files)}')
            print('\nüìã Premiers fichiers non utilis√©s:')
            for file_path in sorted(unused_files)[:20]:
                print(f'  {file_path}')
        else:
            print(f'\nüìä TOTAL FICHIERS AVEC IMPORTS LOCAUX: {len(self.all_dependencies)}')
        
        # Log de la fin d'analyse
        unused_files = set() if local_only else unused_files
        self._safe_log('log_recursive_analysis_complete', self.all_dependencies, unused_files)
        
        return self.all_dependencies, unused_files if not local_only else set()

    def analyze_imports(self, files_to_analyze: List[str]) -> Dict:
        """Analyse les imports des fichiers donn√©s avec d√©tection de cycles intelligente."""
        self.logger.log_info("üöÄ D√©but de l'analyse d'imports", 
                           files_count=len(files_to_analyze),
                           files=files_to_analyze)
        
        start_time = time.time()
        all_dependencies = set()
        import_types = defaultdict(int)
        max_depth = 0
        
        for file_path in files_to_analyze:
            if file_path in self.visited:
                continue
                
            self.logger.log_info(f"üìÅ Analyse de {file_path}", file=file_path, depth=0)
            
            # Analyser les imports du fichier
            imports = self.extract_imports_with_partitioner(file_path)
            
            if imports:
                self.logger.log_info(f"‚úÖ Imports trouv√©s dans {file_path}", 
                                   file=file_path, 
                                   imports=imports,
                                   depth=0)
                
                # Compter les types d'imports
                for imp in imports:
                    if imp.startswith('.'):
                        import_types['relative'] += 1
                    elif imp.startswith('Core.') or imp.startswith('Assistants.') or imp.startswith('UnitTests.'):
                        import_types['local'] += 1
                    else:
                        import_types['external'] += 1
                
                all_dependencies.update(imports)
            else:
                self.logger.log_info(f"üìÑ Aucun import local trouv√© dans {file_path}", 
                                   file=file_path, 
                                   imports=[],
                                   depth=0)
        
        # D√©tecter les cycles
        cycles = self.dependency_graph.detect_cycles()
        for cycle in cycles:
            self.logger.log_warning(f"‚ö†Ô∏è Cycle d√©tect√©: {' -> '.join(cycle)}", cycle=cycle)
        
        end_time = time.time()
        duration = end_time - start_time
        
        # Statistiques finales
        stats = {
            'files_analyzed': len(self.visited),
            'local_imports': len(all_dependencies),
            'cycles_detected': len(cycles),
            'max_depth': max_depth,
            'duration': duration,
            'import_types': dict(import_types)
        }
        
        self.logger.log_info("üéØ Analyse termin√©e", 
                           stats=stats,
                           duration=duration)
        
        # Finaliser le rapport Markdown
        self.logger.finalize_report(stats)
        
        return {
            'dependencies': list(all_dependencies),
            'cycles': cycles,
            'stats': stats
        }

def main():
    """Fonction principale du script d'analyse d'imports."""
    parser = argparse.ArgumentParser(description='Analyseur d\'imports avec partitioner')
    parser.add_argument('--local-only', action='store_true', help='Analyser seulement les imports locaux')
    parser.add_argument('--verbose', action='store_true', help='Mode verbeux')
    parser.add_argument('--debug', action='store_true', help='Mode debug')
    parser.add_argument('--show-cycles', action='store_true', help='Afficher les cycles d√©tect√©s')
    parser.add_argument('--log-output', action='store_true', help='Activer la sortie de logs')
    parser.add_argument('--log-directory', default='logs', help='R√©pertoire pour les logs')
    parser.add_argument('--log-format', choices=['json', 'text'], default='json', help='Format des logs')
    parser.add_argument('--use-import-analyzer-provider', action='store_true', help='Utiliser le provider sp√©cialis√©')
    
    args = parser.parse_args()
    
    # D√©finir les variables
    log_directory = args.log_directory
    files_to_analyze = [
        'Assistants/EditingSession/partitioning/ast_partitioners.py',
        'Assistants/EditingSession/partitioning/partition_schemas.py',
        'Assistants/EditingSession/partitioning/__init__.py',
        'Core/LoggingProviders/import_analyzer_logging_provider.py',
        'UnitTests/partitioning_import_analyzer.py'
    ]
    
    # Configurer le logger simple
    if args.log_output:
        logger = SimpleImportAnalyzerLogger(
            log_directory=log_directory,
            log_format=args.log_format
        )
    else:
        logger = SimpleImportAnalyzerLogger()
    
    # Cr√©er l'analyseur avec le logger simple
    analyzer = PartitioningImportAnalyzer(logging_provider=None)  # On utilise le logger simple int√©gr√©
    # Remplacer le logger int√©gr√© par celui configur√©
    analyzer.logger = logger
    
    print("üß† D√©tection de cycles intelligente (sans limite de profondeur)")
    print("=" * 60)
    
    # Analyser les d√©pendances
    print(f"üîç Analyse des imports de {len(files_to_analyze)} fichiers...")
    
    # Utiliser la nouvelle m√©thode d'analyse
    result = analyzer.analyze_imports(files_to_analyze)
    
    # Afficher les r√©sultats
    print(f"\nüìä R√©sultats de l'analyse:")
    print(f"   Fichiers analys√©s: {result['stats']['files_analyzed']}")
    print(f"   Imports locaux trouv√©s: {result['stats']['local_imports']}")
    print(f"   Cycles d√©tect√©s: {result['stats']['cycles_detected']}")
    print(f"   Dur√©e: {result['stats']['duration']:.2f}s")
    
    if result['dependencies']:
        print(f"\nüì¶ Imports locaux trouv√©s:")
        for dep in sorted(result['dependencies']):
            print(f"   - {dep}")
    
    if result['cycles']:
        print(f"\n‚ö†Ô∏è Cycles d√©tect√©s:")
        for cycle in result['cycles']:
            print(f"   {' -> '.join(cycle)}")
    else:
        print(f"\n‚úÖ Aucun cycle d√©tect√© - structure saine!")
    
    if args.show_cycles and result['cycles']:
        print(f"\nüîç D√©tails des cycles:")
        for i, cycle in enumerate(result['cycles'], 1):
            print(f"   Cycle {i}: {' -> '.join(cycle)}")
    
    print(f"\nÔøΩÔøΩ Rapport d√©taill√© g√©n√©r√© dans: {log_directory}/imports_analysis/")
    print(f"   - Log JSON: imports_analysis.log")
    print(f"   - Rapport Markdown: imports_analysis_report.md")

if __name__ == '__main__':
    main() 