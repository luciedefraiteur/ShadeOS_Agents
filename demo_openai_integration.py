#!/usr/bin/env python3
"""
‚õß D√©monstration OpenAI + MemoryEngine Integration ‚õß

Script de d√©monstration pour montrer l'int√©gration entre OpenAI Agents SDK et MemoryEngine.
Cr√©√© par Alma, Architecte D√©moniaque du Nexus Luciforme.
"""

import sys
import os
import json
from pathlib import Path

# Ajouter le r√©pertoire racine au PYTHONPATH
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from MemoryEngine.core.engine import MemoryEngine
from MemoryEngine.EditingSession.Tools import (
    ToolRegistry, 
    ToolInvoker, 
    ToolSearchEngine, 
    OpenAIAgentTools,
    initialize_tool_registry
)


def demo_tool_registry_with_mock_tools():
    """D√©monstration avec des outils simul√©s."""
    print("üé≠ D√©monstration avec outils simul√©s")
    print("=" * 50)
    
    # Initialiser MemoryEngine
    memory_engine = MemoryEngine()
    
    # Cr√©er un registre avec des outils simul√©s
    tool_registry = ToolRegistry(memory_engine)
    
    # Ajouter des outils simul√©s
    mock_tools = {
        "safe_create_file": {
            "function": lambda file_path, content: {"success": True, "file_path": file_path},
            "lucidoc": {
                "id": "safe_create_file",
                "üúÑpacte": {
                    "type": "inscription",
                    "intent": "Cr√©er un fichier de mani√®re s√©curis√©e",
                    "level": "fondamental"
                },
                "üúÇinvocation": {
                    "requires": ["file_path", "content"],
                    "optional": [],
                    "returns": "Dict avec statut de cr√©ation"
                },
                "üúÅessence": {
                    "keywords": ["file", "create", "safe"],
                    "symbolic_layer": "Cr√©ation s√©curis√©e de fichiers",
                    "usage_context": "Cr√©ation de nouveaux fichiers dans le projet"
                }
            },
            "source": "demo",
            "file_path": "demo/safe_create_file.luciform"
        },
        "safe_replace_text_in_file": {
            "function": lambda file_path, old_text, new_text: {"success": True, "lines_modified": [1, 2]},
            "lucidoc": {
                "id": "safe_replace_text_in_file",
                "üúÑpacte": {
                    "type": "inscription",
                    "intent": "Remplacer du texte dans un fichier de mani√®re s√©curis√©e",
                    "level": "interm√©diaire"
                },
                "üúÇinvocation": {
                    "requires": ["file_path", "old_text", "new_text"],
                    "optional": [],
                    "returns": "Dict avec lignes modifi√©es"
                },
                "üúÅessence": {
                    "keywords": ["file", "replace", "text", "safe"],
                    "symbolic_layer": "Modification s√©curis√©e de contenu",
                    "usage_context": "Remplacement de texte dans des fichiers existants"
                }
            },
            "source": "demo",
            "file_path": "demo/safe_replace_text_in_file.luciform"
        },
        "analyze_file_structure": {
            "function": lambda file_path: {"scopes": 5, "complexity": "medium"},
            "lucidoc": {
                "id": "analyze_file_structure",
                "üúÑpacte": {
                    "type": "divination",
                    "intent": "Analyser la structure d'un fichier",
                    "level": "avanc√©"
                },
                "üúÇinvocation": {
                    "requires": ["file_path"],
                    "optional": [],
                    "returns": "Dict avec analyse de structure"
                },
                "üúÅessence": {
                    "keywords": ["analyze", "structure", "file", "code"],
                    "symbolic_layer": "Analyse structurelle de code",
                    "usage_context": "Compr√©hension de l'architecture de fichiers"
                }
            },
            "source": "demo",
            "file_path": "demo/analyze_file_structure.luciform"
        }
    }
    
    tool_registry.tools = mock_tools
    print(f"‚úÖ {len(tool_registry.tools)} outils simul√©s ajout√©s")
    
    return tool_registry


def demo_tool_search(tool_registry):
    """D√©monstration du moteur de recherche."""
    print("\nüîç D√©monstration du moteur de recherche")
    print("-" * 40)
    
    search_engine = ToolSearchEngine(tool_registry)
    
    # Recherche par mot-cl√©
    print("üìÅ Recherche 'file':")
    results = search_engine.search_by_keyword("file", limit=5)
    for result in results:
        print(f"  - {result['tool_id']} (score: {result['score']})")
        print(f"    Intent: {result['intent']}")
    
    # Recherche par type
    print("\nüîÆ Outils divination:")
    divination_tools = search_engine.search_by_type("divination")
    for tool in divination_tools:
        print(f"  - {tool['tool_id']}: {tool['intent']}")
    
    # Recherche par niveau
    print("\nüìä Outils fondamentaux:")
    basic_tools = search_engine.search_by_level("fondamental")
    for tool in basic_tools:
        print(f"  - {tool['tool_id']}: {tool['intent']}")
    
    # Statistiques
    stats = search_engine.get_tool_statistics()
    print(f"\nüìà Statistiques: {stats['total_tools']} outils au total")
    print(f"   Par type: {stats['by_type']}")
    print(f"   Par niveau: {stats['by_level']}")


def demo_tool_invoker(tool_registry):
    """D√©monstration du moteur d'invocation."""
    print("\n‚ö° D√©monstration du moteur d'invocation")
    print("-" * 40)
    
    invoker = ToolInvoker(tool_registry)
    
    # Test d'invocation directe
    print("üß™ Test d'invocation directe:")
    result = invoker.invoke_tool("safe_create_file", 
                                file_path="demo_file.py", 
                                content="print('Hello, World!')")
    print(f"  R√©sultat: {result['success']}")
    print(f"  Temps d'ex√©cution: {result['execution_time']:.3f}s")
    
    # Test d'invocation OpenAI
    print("\nü§ñ Test d'invocation OpenAI:")
    tool_call = {
        "id": "demo_call_1",
        "function": {
            "name": "safe_replace_text_in_file",
            "arguments": '{"file_path": "demo_file.py", "old_text": "Hello", "new_text": "Bonjour"}'
        }
    }
    
    result = invoker.invoke_tool_for_openai("safe_replace_text_in_file", 
                                           '{"file_path": "demo_file.py", "old_text": "Hello", "new_text": "Bonjour"}')
    print(f"  R√©sultat: {result['success']}")
    print(f"  Temps d'ex√©cution: {result['execution_time']:.3f}s")
    
    # Statistiques d'ex√©cution
    stats = invoker.get_tool_statistics()
    print(f"\nüìä Statistiques d'ex√©cution:")
    print(f"  Total: {stats['total_executions']}")
    print(f"  Succ√®s: {stats['successful_executions']}")
    print(f"  √âchecs: {stats['failed_executions']}")
    print(f"  Temps moyen: {stats['average_execution_time']:.3f}s")


def demo_openai_integration(tool_registry):
    """D√©monstration de l'int√©gration OpenAI."""
    print("\nü§ñ D√©monstration de l'int√©gration OpenAI")
    print("-" * 40)
    
    openai_tools = OpenAIAgentTools(tool_registry)
    
    # Configuration des outils pour OpenAI
    tools_config = openai_tools.get_openai_tools_config()
    print(f"üîß Configuration OpenAI: {len(tools_config)} outils configur√©s")
    
    # Afficher un exemple de configuration
    if tools_config:
        example_tool = tools_config[0]
        print(f"\nüìù Exemple de configuration d'outil:")
        print(f"  Nom: {example_tool['function']['name']}")
        print(f"  Description: {example_tool['function']['description']}")
        print(f"  Param√®tres requis: {example_tool['function']['parameters']['required']}")
    
    # Contexte pour agent
    print(f"\nüéØ Contexte g√©n√©r√© pour agent:")
    context = openai_tools.get_context_for_agent("cr√©er et modifier un fichier Python")
    print(context)
    
    # Suggestions d'outils
    print(f"\nüí° Suggestions pour 'cr√©er et modifier un fichier':")
    suggestions = openai_tools.suggest_tools_for_task("cr√©er et modifier un fichier")
    for suggestion in suggestions:
        print(f"  - {suggestion['tool_id']}: {suggestion['intent']}")
    
    # Workflow exemple
    print(f"\nüîÑ Workflow exemple pour √©dition de fichier:")
    workflow = openai_tools.create_workflow_example("file_editing")
    print(f"  Description: {workflow['description']}")
    for step in workflow['steps']:
        print(f"  √âtape {step['step']}: {step['action']}")
        print(f"    Outils sugg√©r√©s: {', '.join(step['suggested_tools'])}")


def demo_complete_workflow():
    """D√©monstration d'un workflow complet."""
    print("\nüöÄ D√©monstration d'un workflow complet")
    print("=" * 50)
    
    # Initialiser avec des outils simul√©s
    tool_registry = demo_tool_registry_with_mock_tools()
    openai_tools = OpenAIAgentTools(tool_registry)
    
    # Simuler une conversation avec un agent
    print("ü§ñ Simulation d'une conversation avec agent OpenAI...")
    
    # 1. L'utilisateur demande de cr√©er un module Python
    user_query = "Cr√©e un module Python pour calculer des statistiques"
    
    print(f"\nüë§ Utilisateur: {user_query}")
    
    # 2. L'agent analyse la demande
    context = openai_tools.get_context_for_agent(user_query)
    print(f"\nü§ñ Agent (contexte): {context[:100]}...")
    
    # 3. L'agent sugg√®re des outils
    suggested_tools = openai_tools.suggest_tools_for_task(user_query)
    print(f"\nüîß Outils sugg√©r√©s:")
    for tool in suggested_tools:
        print(f"  - {tool['tool_id']}: {tool['intent']}")
    
    # 4. L'agent ex√©cute les actions
    print(f"\n‚ö° Ex√©cution des actions:")
    
    # Cr√©er le fichier
    invoker = ToolInvoker(tool_registry)
    result1 = invoker.invoke_tool("safe_create_file", 
                                 file_path="statistics.py", 
                                 content="""
def calculate_mean(numbers):
    return sum(numbers) / len(numbers)

def calculate_median(numbers):
    sorted_numbers = sorted(numbers)
    n = len(sorted_numbers)
    if n % 2 == 0:
        return (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2
    else:
        return sorted_numbers[n//2]

def calculate_standard_deviation(numbers):
    mean = calculate_mean(numbers)
    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)
    return variance ** 0.5
""")
    print(f"  ‚úÖ Cr√©ation du fichier: {result1['success']}")
    
    # Analyser la structure
    result2 = invoker.invoke_tool("analyze_file_structure", file_path="statistics.py")
    print(f"  ‚úÖ Analyse de structure: {result2['success']}")
    print(f"     Scopes: {result2['result']['scopes']}, Complexit√©: {result2['result']['complexity']}")
    
    # Modifier le fichier pour ajouter une fonction
    result3 = invoker.invoke_tool("safe_replace_text_in_file", 
                                 file_path="statistics.py", 
                                 old_text="def calculate_standard_deviation(numbers):",
                                 new_text="""def calculate_variance(numbers):
    mean = calculate_mean(numbers)
    return sum((x - mean) ** 2 for x in numbers) / len(numbers)

def calculate_standard_deviation(numbers):""")
    print(f"  ‚úÖ Ajout de fonction variance: {result3['success']}")
    
    # 5. R√©sum√© final
    print(f"\nüìä R√©sum√© du workflow:")
    stats = openai_tools.get_agent_statistics()
    print(f"  - Outils disponibles: {stats['total_tools_available']}")
    print(f"  - Ex√©cutions: {stats['tool_executions']['total_executions']}")
    print(f"  - Succ√®s: {stats['tool_executions']['successful_executions']}")
    print(f"  - Temps moyen: {stats['tool_executions']['average_execution_time']:.3f}s")
    
    # Nettoyage
    if os.path.exists("statistics.py"):
        os.remove("statistics.py")
        print(f"\nüßπ Fichier de d√©monstration supprim√©")


def main():
    """D√©monstration principale."""
    print("‚õß D√©monstration OpenAI + MemoryEngine Integration ‚õß")
    print("=" * 60)
    
    try:
        # D√©monstrations individuelles
        tool_registry = demo_tool_registry_with_mock_tools()
        demo_tool_search(tool_registry)
        demo_tool_invoker(tool_registry)
        demo_openai_integration(tool_registry)
        
        # D√©monstration de workflow complet
        demo_complete_workflow()
        
        print("\n" + "=" * 60)
        print("üéâ D√©monstration termin√©e avec succ√®s !")
        print("L'int√©gration OpenAI + MemoryEngine est pr√™te pour l'utilisation !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 